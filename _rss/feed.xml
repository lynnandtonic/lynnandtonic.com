<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lynn Fisher</title>
    <atom:link href="https://lynnandtonic.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>Lynn Fisher‚Äôs Thoughts on Design and the Web</description>
    <language>en-US</language>
    <link>https://lynnandtonic.com</link>

    <item>
      <title>Blog Questions Challenge 2025</title>
      <description><![CDATA[<p>I was tagged to answer these questions by <a href="https://www.zachleat.com/web/blogging/">Zach Leatherman</a> as part of the larger Blog Questions Challenge originally started by <a href="https://blog.avas.space/bear-blog-challenge/">ava</a>.</p><p>I‚Äôll pass the baton to you, dear reader (if you haven‚Äôt already done it)!</p><h2>1. Why did you start blogging?</h2><p>I think I got a taste with LiveJournal in the early ‚Äô00s and then around 2007-2010, the best stuff was being shared via personal blogs, so <a href="https://lynnandtonicblog.com/">I started one</a>. It was/is a mix of life experiences, inspiration, art, and just general amusement. I call it a lifestyle blog but who knows what that means.</p><p>Later in 2013, I started <a href="https://lynnandtonic.com/thoughts/">writing on my portfolio site</a> about design and web development honestly in hopes it would help my career. (And it did help.)</p><h2>2. What platform are you using to manage your blog and why?</h2><p>My <a href="https://lynnandtonicblog.com/">lifestyle blog</a> runs on <a href="https://www.11ty.dev/">Eleventy</a> which I <a href="https://lynnandtonic.com/thoughts/entries/the-nbsp-was-breaking-after-all/">migrated away from Wordpress</a> in 2023. Eleventy is great!</p><p>My <a href="https://lynnandtonic.com/thoughts/">portfolio blog</a> is a bit of Markdown and a lot of Pug, compiled with Grunt. I keep saying I will move it to something else but I never do. I love Pug.</p><p>Both are deployed on Netlify.</p><h2>3. Have you blogged on other platforms before?</h2><p>I guess if you count LiveJournal or MySpace.</p><h2>4. How do you write your posts?</h2><p>I start in <a href="https://ia.net/writer">iA Writer</a> with a loose outline and write a bit stream of consciousness. Then I move into Markdown/HTML to get things edited and images created and placed. It helps me to see the words within the site UI to complete my thoughts.</p><p>Also imagine some staring into the middle distance and periodically leaving to busy myself with some random task.</p><h2>5. When do you feel most inspired to write?</h2><p>Early in the morning. In the summertime. When I‚Äôve finished a project that has some complex bits. When I‚Äôm feeling really happy. When I‚Äôm feeling frustrated with the industry.</p><h2>6. Do you publish immediately after writing, or do you let it simmer a bit as a draft?</h2><p>I usually give it a day because I like to publish in the morning. If something sits in drafts for a while, it tells me I don‚Äôt feel like my thoughts are quite ready.</p><h2>7. What's your favorite post on your blog?</h2><p>All of my portfolio refresh case studies but especially <a href="https://lynnandtonic.com/thoughts/entries/case-study-2020-refresh/">2020</a> and <a href="https://lynnandtonic.com/thoughts/entries/case-study-2023-refresh/">2023</a>. Also maybe <a href="https://lynnandtonic.com/thoughts/entries/sabbaticals-and-muscle-memory/">Sabbaticals and muscle memory</a>.</p><h2>8. Any future plans for your blog?</h2><p>Maybe move things off Pug. But probably not.</p>]]></description>
      <pubDate>Mon, 03 Feb 2025 15:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/blog-questions-challenge-2025/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/blog-questions-challenge-2025/</guid>
    </item>

    <item>
      <title>Ten years of A Single Div</title>
      <description><![CDATA[<p>On 22 May 2019, I write about <a href="https://lynnandtonic.com/thoughts/entries/five-years-of-a-single-div/">five years of A Single Div</a>, my favorite little side project.</p><p>I participate in <a href="https://inktober.com/">#inktober</a> but with single div illustrations. I call it <a href="https://a.singlediv.com/divtober2019/">#divtober</a>.</p><p><img src="https://lynnandtonic.com/assets/images/thoughts/single-div-ten-2019.jpg" alt="grid of illustrations including a monochrome ring box, a grim reaper, a gold Nintendo cartridge, and more"></p><p>I have so much fun with the challenge. My enthusiasm for the process grows even more.</p><p>I get <a href="https://twitter.lynnandtonic.com/status/1197989912970067969/">nerd sniped</a> and draw a <a href="https://codepen.io/lynnandtonic/pen/NWWmzjr">Tesla Cybertruck with one div</a> which becomes one of my most popular pens on CodePen.</p><p><img src="https://lynnandtonic.com/assets/images/thoughts/single-div-ten-cybertruck.jpg" alt="Cybertruck"></p><p>I fall in love with conic gradients. With these, any drawing seems possible.</p><p>I draw single divs live with <a href="https://youtu.be/-jPSLm4-2cc">Erik Kroes</a> and <a href="https://www.learnwithjason.dev/a-single-spooky-div">Jason Lengstorf</a> to show how <a href="https://css-tricks.com/very-extremely-practical-css-art/">very extremely practical</a> it really is.</p><p>I go months without contributing to the project, but each October my love for it renews. Each time I question whether I can do it and each time I end up with 31 drawings I adore. I feel accomplished and rejuvenated.</p><p>Other CSS folks start to join in with <a href="https://x.com/search?q=%23divtober+-from%3Alynnandtonic">#divtober</a>. They share beautiful, creative, and astonishing single divs of their own. I love to see what they make.</p><p>I watch people <a href="https://news.ycombinator.com/item?id=40242410">discover the project for the first time</a>, again and again. I chuckle while they try to make sense of it.</p><p>For <a href="https://front-end.social/@lynnandtonic/111330310113669529">#divtober 2023</a>, I create some of my favorite single divs ever. I am also more tired than ever.</p><p><img src="https://lynnandtonic.com/assets/images/thoughts/single-div-ten-2023.jpg" alt="grid of illustrations including Frida Kahlo, McDonald‚Äôs happy meals, skeletons, stained glass, and more"></p><p>I remind myself that projects don‚Äôt need to grow forever. And they can always be continued in the future.</p><p>On 22 May 2024, I call <a href="https://a.singlediv.com">A Single Div</a> done for now. Ten years of drawing, learning, and challenging myself. A decade of growth to look back on.</p><p>Thanks for everything, little side project üíö</p><video width="100%" autoplay muted playsinline loop><source src="https://lynnandtonic.com/assets/images/thoughts/single-div-ten-fin.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.<span class='screenreader'>Black background with the word ‚Äúten‚Äù written in all caps in white block letters. The letters slowly move and form the word ‚Äúfin‚Äù.</span></video><small class="footnote">View this final drawing and more at <a href="https://a.singlediv.com">a.singlediv.com</a>.</small>]]></description>
      <pubDate>Wed, 22 May 2024 15:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/ten-years-of-a-single-div/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/ten-years-of-a-single-div/</guid>
    </item>


    <item>
      <title>When your work disappears</title>
      <description><![CDATA[<p><em><strong>Edit</strong>: I let the expensive <del>oss.love</del> domain expire and moved the site to <a href="https://oss.cards">oss.cards</a></em></p><hr><p>The web is always changing and that‚Äôs one of my favorite things about it. But there‚Äôs a unique sadness in visiting a URL and seeing a 404 where your work once was.</p><p>I make websites for a living and most of the time it‚Äôs for companies. I don‚Äôt have any delusion about who owns that work. <em>Don Draper voice</em>: ‚ÄúThat‚Äôs what the money is for!‚Äù</p><p>But that work is still also mine: the product of my brain and hands working together in the way only mine do. I made it a requirement that any job I take allows me to say so. But in the end, the code, the artwork, the domain‚Äîit belongs to them.</p><p>Companies change. They grow, have layoffs, pivot. They get acquired, they close up shop. And as team members rotate and domains expire, you see more and more of your work disappear.</p><p>I don‚Äôt have any solutions here, just thoughts and feelings about things I mostly have no control over. I feel hopeful about renewed enthusiasm for personal sites and blogs over platforms, but for most of my work, it‚Äôs just out of my hands.</p><p>So when <del>oss.love</del> <a href="https://oss.cards">oss.cards</a> went down this February, I felt that familiar grief. Another bit of work disappearing into the ether. Netlify decided not to renew the domain and planned to archive the project. A bit on impulse, I asked if they would give it to me and they said yes.</p><p>After some work getting things transferred and updated, the site is back up and under my care! You can continue to visit <del>oss.love</del> <a href="https://oss.cards">oss.cards</a> and share cards of appreciation with your fave open source peeps.</p><p><a href="https://oss.cards"><img src="https://lynnandtonic.com/assets/images/web-oss-cards.svg" width="1150" height="700" alt="a developer pun Valentine‚Äôs card featuring a happy Earth saying ‚ÄúYou had me at Hello World‚Äù" decoding="async" loading="lazy"></a></p><p>As with all my projects, but this one especially, I am keenly aware of the costs of maintenance:</p><ul><li><strong>The domain is not cheap.</strong> I thought I would have to pick a new one, but <a href="https://opensauced.pizza/">OpenSauced</a> and <a href="https://ui.dev">ui.dev</a> are generously sponsoring the project so I can cross that bridge later.</li><li><strong>The site has a lot of pieces I don‚Äôt understand.</strong> It uses GitHub APIs, Netlify functions, Supabase, and Cloudinary. This is all outside of my skillset, so if things break or I want to make enhancements I‚Äôll likely need help. The site is <a href="https://github.com/lynnandtonic/oss-valentines">open source</a> so hopefully that will make it easier.</li><li><strong>High usage brings high costs</strong>. Right now I‚Äôm using free tiers for services, but if the project gets a lot of traffic (good), the costs will go up (bad). Again another bridge I will cross later if needed.</li></ul><p>That‚Äôs not nothing, but I‚Äôm also not worried. I‚Äôm glad that‚Äîat least for now‚Äîmy work still appears when you hit that URL.</p><p>Some thanks are in order here. Thank you to Netlify and specifically <a href="https://www.hawksworx.com/">Phil Hawksworth </a> for his amazing work on the original project. Huge thank you to <a href="https://ryanmulligan.dev/">Ryan Mulligan</a> for helping me transfer everything. Thank you to <a href="https://jason.energy/">Jason Lengstorf</a> for helping me <a href="https://www.youtube.com/watch?v=59P9xrZ5UvQ">get the site back up and running</a>. And thank you again to <a href="https://opensauced.pizza/">OpenSauced</a> and <a href="https://ui.dev">ui.dev</a> for supporting the project.</p><p>Now, get sending those cards üíö <del>oss.love</del> <a href="https://oss.cards">oss.cards</a></p>]]></description>
      <pubDate>Tue, 7 May 2024 15:30:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/when-your-work-disappears/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/when-your-work-disappears/</guid>
    </item>

    <item>
      <title>I archived my tweets</title>
      <description><![CDATA[<p>I finally made an archive of my Twitter feed. It lives at <a href="https://twitter.lynnandtonic.com">twitter.lynnandtonic.com</a>. I built it with <a href="https://www.11ty.dev/">11ty</a> after processing my downloaded archive into markdown with Tim Hutton‚Äôs <a href="https://github.com/timhutton/twitter-archive-parser">Twitter Archive Parser</a>.</p><img src='https://lynnandtonic.com/assets/images/thoughts/twitter-archive.jpg' width='1200' height='830' class='border wide' loading='lazy' alt='twitter archive that looks like a normal Twitter profile minus all the sidebar stuff' /><p>To get things looking and behaving the way I wanted, it ended up being a pretty manual process. It was a bit tedious, but I only planned to do this once. I figured if it was worth archiving, it was worth taking this extra bit of time and effort.</p><p>The primary things I wanted from this archive:</p><ul><li>I can read backward in time through all my tweets</li><li>I can link to an individual tweet</li><li>I can search my tweets for specific words/phrases</li></ul><p>With 11ty, these things were pretty straightforward. It‚Äôs essentially a blog where each tweet is a post. The two interesting issues I ran into were more philosophical than technical:</p><ol><li>How do you archive other people‚Äôs words?</li><li>Is restoration a part of this process?</li></ol><h2>Other people‚Äôs words</h2><p>I think in general it‚Äôs good to honor people‚Äôs decision to remove their words from the web. But from the perspective of archiving that can get tricky? Retweets are clearly someone else‚Äôs content I just happened to forward along, so I didn‚Äôt include them in my archive. Quote tweets feel a bit more complicated.</p><p>With a quote tweet, the original tweet is the context. Without it, the quote tweet is incomplete or even meaningless. It‚Äôs an interesting dilemma <em>because</em> of this mechanism within Twitter. In blogs or articles, you‚Äôd quote/cite the original author as you respond or add context. If the original source was unpublished, you might never even know. And if you did, would you remove all the quotes from your article? I assume probably not. Should you? I don‚Äôt know!</p><p>It feels like a tough balance. I ultimately decided to include my quote tweets. I reviewed them all and they felt pretty low stakes. Some tweets I quoted had already been deleted at the time of archiving, so those are missing.</p><h2>Restoration</h2><p>Remember when Twitter used to embed a preview of an Instagram photo? I especially remember how annoying it was when that stopped working. Competitors gonna compete or something.</p><p>I wanted my archive to do that again, but wasn‚Äôt sure if that felt dishonest somehow? Since my tweets don‚Äôt look like that now? Ultimately I decided to restore that. Archives everywhere do restoration work on their collections. Look I‚Äôm not saying my tweet about eating corn dogs at Disneyland is like a centuries-old painting, just that there‚Äôs precedent.</p><p>A few things I restored that added helpful context:</p><ul><li>Instagram photo previews - <a href='https://twitter.lynnandtonic.com/status/454691882313207808/'>example</a></li><li>YouTube video poster images and titles - <a href='https://twitter.lynnandtonic.com/status/623871081644867584/'>example</a></li><li>Spotify embeds - <a href='https://twitter.lynnandtonic.com/status/1483877166739705860/'>example</a></li><li>OG images and titles for articles (many tweets relied on the embedded photo/headline) - <a href='https://twitter.lynnandtonic.com/status/1572009357394710529/'>example</a></li><li>Polls (via a screenshot) - <a href='https://twitter.lynnandtonic.com/status/1494733548602867717/'>example</a></li><li>Broken links (replaced with new links to the same content, if possible)</li><li>Alt text and video descriptions, even for those that didn‚Äôt originally have them</li></ul><h2>Good for now</h2><p>I decided not to include my replies. Those also feel incomplete without the original tweets, so I punted that decision to later, if ever.</p><p>I do miss the conversations around the tweets. And although like/retweet stats come with their own problems, I also miss the social context they provide. But for now it feels fine without those.</p><p>I don‚Äôt see myself returning to Twitter under current circumstances, so I‚Äôm not expecting to add anything else new. Probably good to call it done. Though I should probably start some archive prep for <a href="https://front-end.social/@lynnandtonic">my Mastodon posts</a>.</p>]]></description>
      <pubDate>Mon, 11 Mar 2024 15:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/i-archived-my-tweets/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/i-archived-my-tweets/</guid>
    </item>

    <item>
      <title>Case Study: lynnandtonic.com 2023 refresh</title>
      <description><![CDATA[<small><p>Another long one, so here‚Äôs some jump links if you‚Äôre looking for something specific:</p><ul><li><a href="#concept">Concept and inspiration</a></li><li><a href="#growing-shrinking">Growing/shrinking</a></li><li><a href="#themes">Color themes</a></li><li><a href="#walking">Walking animation</a></li><li><a href="#transitions">Transitions and performance</a></li></ul></small><hr><h2 id="concept">Concept and inspiration</h2><p>For 2023 I was hoping to do some experimenting with view transitions, but they didn‚Äôt seem quite ready for me yet. So the ol‚Äô thinking cap went back on.</p><p>I‚Äôve had a couple responsive ideas floating around in my head for a few years. The first was maybe you could get some version of the site <em>only</em> while you‚Äôre resizing the browser. It could be a hidden world briefly revealed if you know to resize (and luckily I‚Äôve been encouraging people to do that for years). The second was maybe you could get different versions of the site depending on whether you were resizing the browser larger or smaller. It opens up some cool possibilities if a growing site doesn‚Äôt have to be just the reverse of a shrinking site.</p><p>Both of these ideas require a bit of JavaScript. I needed the site to know when it‚Äôs actively being resized and whether it‚Äôs growing or shrinking in that moment.</p><p>A developer bud of mine helped me <a href="https://jsfiddle.net/p7b1ndmh/">get started</a> with <code>ResizeObserver</code>. I‚Äôll go though the specific code I ended up with farther down, but ultimately I wanted to toggle a class of <code>active</code> while resizing and swap classes <code>shrinking</code> and <code>growing</code> depending on the direction.</p><p>I ran into a hiccup pretty quickly. Turns out resizing is very literal and any tiny pause would cause the class to toggle. The effect was super jarring and jittery. I could‚Äôve probably added some mousedown/mouseup events to make the resize ‚Äúend‚Äù only when you lifted your mouse. That felt tricky to me since windows can resize without a mouse and truthfully I didn‚Äôt want to explore all the ways that happens!</p><p>So I opted to have things reveal on the <em>first</em> resize and remain visible until you navigate away or refresh.</p><p>With that decided, I started experimenting with what the <code>shrinking</code> and <code>growing</code> sites could be. I soon ran into another issue. The more different the two sites were, the less impactful the transition between them felt. It was almost like my <a href="https://lynnandtonic.com/archive/2017/">2017 refresh</a> but if it only had two layouts instead of 21. This really wasn‚Äôt the effect I was going for.</p><p>The sites had to be tied together in some way, similar but different, with something to visually ground them. So it got me thinking about film transitions and match cuts. Edgar Wright is so good at them.</p><div><iframe width="560" height="315" src="https://www.youtube.com/embed/zsnN5LSrIKs?si=eDhG1u1tISm5D3Lr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><p>It also got me thinking about multiverses. Like how in the show <em>Fringe</em>, match cuts and lens flare transitions showed us we were moving between the two universes.</p><div><iframe width="560" height="315" src="https://www.youtube.com/embed/0lYfYnOeGPg?si=-DFTiX7UGnWX5agA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><p>These cuts sometimes move us from earlier to later in time or from one place to another. That concept led me to the idea of a city street: one normal and one grungy after some apocalyptic event. I liked how they could be either present/future or parallel versions of the same place.</p><h2 id="growing-shrinking">Street scenes: growing and shrinking</h2><p>In case you haven‚Äôt interacted with this version of the site, this is how the artwork ultimately looks and behaves. (Try resizing it on a wide monitor!)</p><video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-resize-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-resize.mp4" type="video/mp4"> Sorry, your browser doesn‚Äôt support embedded videos.</video><p>The street scene is a single SVG exported from Illustrator. The way the file is configured in Illustrator does most of the work here. Essentially there are four layers to the artwork:</p><ul><li>default (artwork that persists between shrinking and growing)</li><li>shrinking (grunge street only)</li><li>growing (normal street only)</li><li>default-top (also persists between the two, but needs to be on top of the growing/shrinking artwork)</li></ul><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-street-default.jpg' width='1200' height='255' loading='lazy' alt='buildings with mostly blank facades' /><figcaption class='footnote'>default layer</figcaption></figure><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-street-shrinking.jpg' width='1200' height='255' loading='lazy' alt='isolated windows, plants, graffiti, etc.' /><figcaption class='footnote'>shrinking layer</figcaption></figure><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-street-growing.jpg' width='1200' height='255' loading='lazy' alt='isolated windows, lights, etc.' /><figcaption class='footnote'>growing layer</figcaption></figure><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-street-default-top.jpg' width='1200' height='255' loading='lazy' alt='isolated fencing, window reflections, etc.' /><figcaption class='footnote'>default-top layer</figcaption></figure><p>When I export from Illustrator, I use layer names as IDs and that gives me SVG code like this (simplified here):</p>
<pre><code class="language-svg">&lt;svg&gt;
  &lt;g id=&quot;default&quot;&gt;...&lt;/g&gt;
  &lt;g id=&quot;shrinking&quot;&gt;...&lt;/g&gt;
  &lt;g id=&quot;growing&quot;&gt;...&lt;/g&gt;
  &lt;g id=&quot;default-top&quot;&gt;...&lt;/g&gt;
&lt;/svg&gt;
</code></pre><p>The JavaScript looks like this for adding classes <code>shrinking</code> and <code>growing</code> to the <code>&lt;html&gt;</code> element. This could probably use some refactoring from a JS professional, but alas it works and so I move on.</p>
<pre><code class="language-js">let oldWidth = -1;

const myObserver = new ResizeObserver(entries =&gt; {
  entries.forEach(entry =&gt; {
    const newWidth = entry.contentRect.width;
    if (oldWidth !== -1 &amp;&amp; oldWidth &gt; newWidth) {
      // Shrinking
      root.classList.remove(&quot;growing&quot;);
      if (!root.classList.contains(&quot;shrinking&quot;)) {
        root.classList.add(&quot;shrinking&quot;);
      }
    } else if (oldWidth !== -1 &amp;&amp; oldWidth &lt; newWidth) {
      // Growing
      root.classList.remove(&quot;shrinking&quot;);
      if (!root.classList.contains(&quot;growing&quot;)) {
        root.classList.add(&quot;growing&quot;);
      }
    }
    oldWidth = newWidth;
  });
});

myObserver.observe(body);
</code></pre><p>And from here, I hide/show the <code>shrinking</code> and <code>growing</code> SVG layers depending on the root class.</p>
<pre><code class="language-css">#growing,
#shrinking {
  opacity: 0;
}

.growing #growing,
.shrinking #shrinking {
  opacity: 1;
}
</code></pre><p>Not much going on code-wise as long as the artwork is properly set up, which takes a bit more work! The biggest challenge was theming and changing the colors in the artwork.</p>
<h2 id="themes">Theming, also described as why am I doing this?</h2><p>To give the scenes proper moods, <code>growing</code> and <code>shrinking</code> each have their own color themes. The normal street gets a warmer, brighter theme with purples and pinks, while the grunge street gets a colder, gloomier theme with browns and blues.</p><p>But also whoops there‚Äôs light and dark modes to consider. I do like the idea that the streets could be shown in daylight and at nighttime. But this meant there were four color themes to manage. And I was committed to the one SVG handling them all.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-themes.jpg' width='1200' height='534' loading='lazy' alt='street artwork in four different color themes' /><figcaption class='footnote'>shrinking and growing themes in light and dark modes</figcaption></figure><p>So I set up the themes like this with each color corresponding with similar colors in the other themes.</p><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-themes-colors.jpg' width='1000' height='545' loading='lazy' alt='color palettes for four themes with the colors stacked and assigned number values' /><p>This allowed in most cases (I‚Äôll get back to that) for a CSS custom property (variable) to handle the color swaps. I‚Äôd edit the SVG code so strokes and fills use these variables:</p>
<pre><code class="language-svg">&lt;path stroke=&quot;var(--color1)&quot;&gt;...&lt;/path&gt;
&lt;path   fill=&quot;var(--color2)&quot;&gt;...&lt;/path&gt;
&lt;path   fill=&quot;var(--color3)&quot;&gt;...&lt;/path&gt;
</code></pre><p>And the CSS could look like this:</p>
<pre><code class="language-css">/* light mode */
:root.shrinking {
  --color1: #fff;
  --color2: #f4eddf;
  --color3: #d8cfb8;
}
:root.growing {
  --color1: #fff;
  --color2: #fcf4df;
  --color3: #efd2bb;
}

/* dark mode */
@media (prefers-color-scheme: dark) {
  :root.shrinking {
    --color1: #e2b788;
    --color2: #d3a97a;
    --color3: #8e7c5f;
  }
  :root.growing {
    --color1: #f69f72;
    --color2: #eb7162;
    --color3: #a55164;
  }
}
</code></pre><p>All the colors would eventually get added here and the illustration would adapt to the changing themes.</p><p>To make this as easy as possible, the SVG that gets exported from Illustrator is set up with everything in light mode <code>shrinking</code> (even the <code>growing</code> only layer).</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-street-light-only.jpg' width='1200' height='471' loading='lazy' alt='street scene with all layers showing in the blue and tan theme' /><figcaption class='footnote'>all layers set in blue/brown theme (despite <code>growing</code> never showing up that way on the site)</figcaption></figure><p>This limited things to just one set of hex color codes to find and replace with variables. I use <a href="https://css-tricks.com/run-multiple-find-replace-commands-sublime-text/">RegReplace</a> in Sublime Text for this. There‚Äôs a lot to be desired from design software exporting and this <a href="https://lynnandtonic.com/thoughts/entries/svg-export-wishlist/">SVG export wishlist</a> I wrote up is super relevant to what I did with this project.</p><h3>Let‚Äôs make it more complicated</h3><p>So... what about those edge cases that the CSS variables couldn‚Äôt cover? Well, sometimes the direct color swap just didn‚Äôt work when going from light to dark mode, usually too much contrast or not enough. The shop windows are a good example. For the <code>growing</code> street‚Äôs light mode, I wanted the windows to be a blue tint reflecting the sky. But for dark mode, I wanted the windows to look like they‚Äôre being illuminated from within.</p><p>So the colors I wanted were #7 for light mode and #2 for dark.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-light-to-dark.jpg' width='1200' height='562' loading='lazy' alt='the same building illustration on the left with light blue windows and on the right with vibrant orange/pink windows corresponding to #7 and #2 values in their respective palettes' /></figure><p>So I‚Äôd name the layers that needed this specific color change <code>L7D2</code> in Illustrator. Light 7 to Dark 2. These would get exported as IDs, I‚Äôd change them to classes like this:</p>
<pre><code class="language-svg">&lt;path class=&quot;L7D2&quot; fill=&quot;var(--color7)&quot;&gt;...&lt;/path&gt;
</code></pre><p>And then the CSS would look like this:</p>
<pre><code class="language-css">@media (prefers-color-scheme: dark) {
  .L7D2 {
    --color7: var(--color2);
  }
}
</code></pre><p>And so on for each of the swaps that was needed. Since the artwork is set up in light mode, I only need to change the values for dark mode. It was a bit of a brain melter as I was working on it, but once I got the system down it worked pretty well.</p><h3>We ride at dawn</h3><p>One last bit about theming! When you first get to the site (on any page), the theme is just black and white until you start to resize. Go ahead and try resizing this page.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-the-dawn.jpg' width='1342' height='678' loading='lazy' alt='white and black minimalist website' /></figure><p>These initial colors are set with variable fallbacks. I call this initial state of the site ‚ÄúThe Dawn‚Äù so I set those colors like this:</p>
<pre><code class="language-css">/* light mode */
:root {
  --dawn-light: #f7f7f7;
  --dawn-dark: #0c0c0c;
  --bg-dawn: var(--dawn-light);
}

/* dark mode */
@media (prefers-color-scheme: dark) {
  :root {
    --bg-dawn: var(--dawn-dark);
  }
}
</code></pre><p>And then variables for site components get set like this:</p>
<pre><code class="language-css">/* light mode */
:root {
  --nav-bg: var(--color2, var(--bg-dawn));
}

/* dark mode */
@media (prefers-color-scheme: dark) {
  :root {
    --nav-bg: var(--color4, var(--bg-dawn));
  }
}
</code></pre><p>Or for some of the SVGs, they look like this:</p>
<pre><code class="language-svg">&lt;path fill=&quot;var(--color3, var(--bg-dawn))&quot;&gt;...&lt;/path&gt;
</code></pre><p>Until variables like <code>--color3</code> are activated with the <code>growing</code> and <code>shrinking</code> classes, we get The Dawn fallbacks.</p>
<h2 id="walking">Let‚Äôs get walking</h2><p>To ground the street scenes more, I decided to have a person walking through both of them. I hoped it would provide some visual focus while making the scene more dynamic.</p><p>The walking cycle is a frame animation and the SVG sprite looks like this:</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-walking.jpg' width='1500' height='348' loading='lazy' alt='side by side illustrations of every step in a walking cycle' /></figure><p>A <code>.walking</code> container element is placed in the center of the viewport with its <code>overflow: hidden</code>. The SVG sprite is sized appropriately and is positioned within the container.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-walking-container.png' width='1500' height='891' loading='lazy' alt='a red box shows one frame of the walking animation at a time' /></figure><p>A CSS animation moves the sprite to the left to create a stepped, walking animation:</p>
<pre><code class="language-css">@keyframes walking {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(-100%, 0);
  }
}

.walking svg {
  animation: walking 1100ms steps(10, end) infinite;
}
</code></pre><p>And that looks something like this:</p><video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-walking-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-walking.mp4" type="video/mp4"> Sorry, your browser doesn‚Äôt support embedded videos.</video><p>But because I only want the walking animation to happen while the browser is resizing, I have to do a couple things. Earlier I mentioned that triggering something only on resize was a jittery mess, so I ended up adding a class of <code>active</code> when resizing <em>starts</em> and setting a <code>timeout</code> to remove the class after a bit of time (500ms).</p>
<pre><code class="language-js">const app = document.querySelector('.header-main');
const observerDebouncers = new WeakMap;

let oldWidth = -1;

const myObserver = new ResizeObserver(entries =&gt; {
  entries.forEach(entry =&gt; {
    clearTimeout( observerDebouncers.get( entry.target ));
    observerDebouncers.set( entry.target, setTimeout(() =&gt; {
      entry.target.dispatchEvent( new CustomEvent( 'resized' ));
    }, 500));
    const newWidth = entry.contentRect.width;
    if (oldWidth !== -1 &amp;&amp; oldWidth &gt; newWidth) {
      // Shrinking
      app.classList.add(&quot;active&quot;);
      root.classList.remove(&quot;growing&quot;);
      if (!root.classList.contains(&quot;shrinking&quot;)) {
        root.classList.add(&quot;shrinking&quot;);
      }
    } else if (oldWidth !== -1 &amp;&amp; oldWidth &lt; newWidth) {
      // Growing
      app.classList.add(&quot;active&quot;);
      root.classList.remove(&quot;shrinking&quot;);
      if (!root.classList.contains(&quot;growing&quot;)) {
        root.classList.add(&quot;growing&quot;);      }
    }
    oldWidth = newWidth;
  });
});

body.addEventListener( 'resized', event =&gt; {
  app.classList.remove(&quot;active&quot;);
});

myObserver.observe(body);
</code></pre><p>This allows enough time for the walk cycle to continue through short pauses and feel smooth if you resize the browser at a slower pace.</p><p>And when you stop resizing completely, the sprite returns to its default frame (bottom left) of just standing and waiting.</p>
<pre><code class="language-css">.walking svg  {
  transform: translate(0, -50%);
}
</code></pre><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-walking-standing.png' width='1500' height='891' loading='lazy' alt='a frame of the person just standing still' /></figure><h3>A few more details</h3><p>To swap the direction of the walking animation from right to left, we apply a little transform:</p>
<pre><code class="language-css">.shrinking .walking {
  transform: scale(-1, 1);
}
</code></pre><p>The walking SVG also gets the <code>growing</code> and <code>shrinking</code> treatment just like the street scene where layers are revealed/hidden and colors are changed.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-walking-themes.jpg' width='1410' height='682' loading='lazy' alt='character‚Äôs clothes change colors between themes, sometimes red and sometimes teal sweatshirt for example; sometimes they have a backpack and sometimes headphones' /></figure><p>And finally to complete the walking visual, the street SVG gets the <a href="https://typetura.com">Typetura</a> treatment. I wrote about using Typetura to animate on resize in my <a href="https://lynnandtonic.com/thoughts/entries/case-study-2021-refresh/">2021 case study</a>, and here I‚Äôm using it to move the street scene to the left and right while you resize the browser.</p><video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-resize-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-resize.mp4" type="video/mp4"> Sorry, your browser doesn‚Äôt support embedded videos.</video><h2 id="transitions">Transitions and performance</h2><p>Earlier I mentioned taking inspiration from the tv show <em>Fringe</em>. When they move between the two universes, along with the color change and lens flare, there‚Äôs a bit of a zoom-in-out shaky transition.</p><div><iframe width="560" height="315" src="https://www.youtube.com/embed/0lYfYnOeGPg?si=-DFTiX7UGnWX5agA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><p>I tried something like this! I had an animation run when you switched resize directions that did a nice little <code>scale()</code> transform and a saturation <code>filter</code>. The browsers did not like this one bit and it slowed things down so much it wasn‚Äôt going to work.</p><p>So I experimented with just using filters and blend modes, then just fill/color transitions with different easing and delays. None seemed to feel or work quite right!</p><p>I then got thinkin‚Äô about <em>WandaVision</em> and static/interference and old-school televisions. So I added a simple <code>glitch</code> layer above the artwork that shows for 200ms when the direction changes. This ended up being the best compromise of achieving that visual cue and not reducing performance too much.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-glitch.jpg' width='1358' height='610' loading='lazy' alt='street scene illustration covered with semi-transparent black zig-zag lines pattern' /><figcaption class='footnote'>glitch overlay</figcaption></figure><video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-glitch-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2023-glitch.mp4" type="video/mp4"> Sorry, your browser doesn‚Äôt support embedded videos.</video><p>The entire street scene and walking animation works pretty well in all major browsers I tried. Without hardware acceleration things get a bit more choppy, but still works ok.</p><p>Things did start to get slow and stuck when the browser window was <em>tall</em>. The wider it got didn‚Äôt seem to matter until the window was taller than about <code>900px</code>. This forced me to move my projects list from the homepage to a dedicated /work page. I also added a little warning in the corner for those with tall browser windows. üòÑ</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2023-tall-browser.jpg' width='1036' height='372' loading='lazy' alt='the character‚Äôs feet and a lot of empty space. a message in the corner says: Tall browser ya got there! A shorter window will make resizing smoother' /></figure><h2>Anything else?</h2><p>This one was a lot of fun, even though it felt way too complicated while in the middle of it. Overall I really like the effect and I hope it‚Äôs fun for people to discover the street scenes either on purpose or accidentally.</p><p>I used CSS custom properties more than ever before which was fun and I got to use <code>text-wrap: balance</code> on the big headlines on <a href="https://lynnandtonic.com/thoughts">Thoughts</a> pages which is extremely cool. A small thing we‚Äôve been wanting forever.</p><p>I still haven‚Äôt gotten around to moving the site off Grunt, but I hope to do that sometime this year. She tells herself!</p><p>Crossing my fingers for view transitions being ready for the next one of these.</p><p>Thanks for reading! üëã See you next year.</p>]]></description>
      <pubDate>Mon, 4 Mar 2024 15:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/case-study-2023-refresh/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/case-study-2023-refresh/</guid>
    </item>

    <item>
      <title>A decade of working remotely</title>
      <description><![CDATA[<p>As of this month, I‚Äôve been working remotely for ten years. My overall opinion is that it is good and I like it! Here are some random thoughts:</p><ul><li>It‚Äôs just really cool to have worked with people from so many different cities and countries.</li><li>Honestly, I don‚Äôt particularly care about cost savings or productivity. Sometimes remote work is slower and more expensive‚Ä¶ and it‚Äôs still worth doing.</li><li>I don‚Äôt want to wear shoes when I work.</li><li>Remote work requires trusting your team and that‚Äôs something you can choose to do at any time.</li><li>It‚Äôs totally possible to create deep, meaningful relationships with people remotely. I sure have. Also, being together in person has a truly unique magic.</li><li>A very generous monthly stipend for food delivery is one of the best perks I‚Äôve received.</li><li>Because his company went remote in 2020, my husband was able to spend about 5,500 more hours with our senior pups at the end of their lives. I think about that a lot now that they are making him return to the office this year.</li><li>Not driving every day is tops. I like having one car instead of two.</li><li>Remote/hybrid events are hard, but the bar is lower so just a little extra effort and empathy go a long way.</li><li>Timezones are hard! I get why teams limit which timezones they‚Äôll hire in. I also get why that is infuriating for people outside those timezones‚Äîusually folks not in the U.S.</li><li>Related, you can be a remote company and not be an <em>asynchronous</em> company. Clarity of expecations is key.</li><li>I like that I have not had to move to Washington, San Francisco, or Utah (as much as I love the people who live there).</li><li>Going to the cinema in the middle of a weekday is a thing I like to do.</li><li>A good test of a ‚Äúremote-first‚Äù company is what they plan for team members who can‚Äôt make it to in-person events.</li><li>If you‚Äôre bringing team members together somewhere to do an in-person work session, but some people are still participating remotely, buy a dang microphone for the in-person side.</li><li>Fun gifs and custom emojis in team chat really do improve my mood.</li><li>Coworking spaces never clicked for me, despite a lot of trying.</li><li>A lot of people feel uncomfortable being in charge of a remote/hybrid setup. There will be hiccups and we‚Äôre all sensitive about wasting people‚Äôs time. A good guideline is that any time spent making things more accessible or more inclusive is always time well spent. Like, just a random example, it would be the right decision to delay an in-person All-Hands a few minutes in order to restart the livestream so captions are enabled for remote attendees.</li><li>Video recordings of every meeting doesn‚Äôt feel super effective to me. Good note-taking is underrated and should be a shared responsibility.</li><li>It can be lonely working remotely. The quiet stillness after closing a video call can be rough.</li><li>Location-based pay feels like bullshit, but is also‚Äîprobably for the worst‚Äîsomething I will concede.</li><li>I love sending things to people in the mail and being on a remote team provides a lot of fun opportunities for that. Get someone on your team who loves to curate a care package.</li><li>I‚Äôve seen execs point to a super productive off-site as proof that in-person is better. But in reality it showed what the team could do when they‚Äôre able to focus on one thing, uninterrupted, and with the usual decision blockers removed.</li><li>Regularly a walk, a shower, a nap, or a distracted cleaning session is what it takes to unblock my brain.</li><li>I sometimes think I actually would like being in an office again. It would have to be less than a mile from my house though so I probably won‚Äôt.</li><li>The best encapsulation of my feelings about remote work is this quote from Cheryl Broetje, oft-repeated during my time at &amp;yet: ‚ÄúLiving in the place you belong, with the people you love, doing the work that‚Äôs yours, on purpose.‚Äù</li></ul>]]></description>
      <pubDate>Thu, 22 Feb 2024 15:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/a-decade-of-working-remotely/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/a-decade-of-working-remotely/</guid>
    </item>

    <item>
      <title>SVG export wishlist</title>
      <description><![CDATA[<p>Lately for work and for my portfolio, I‚Äôve been making complex SVG illustrations that require a lot of fine-grained control once implemented. Colors change, layers show and hide, and animations run based on various user input.</p><p>A tedious part of that process has been prepping the SVG after exporting it from Illustrator. Some things are updated manually, some with the <a href="https://css-tricks.com/run-multiple-find-replace-commands-sublime-text/">RegReplace</a> plugin in Sublime Text, and some with optimization tools like <a href="https://github.com/svg/svgo">SVGO</a>.</p><p>It would be cool and useful if some of this work could happen when the SVG is initially exported. I know it‚Äôs a forever problem making design software‚Äôs output more closely resemble developers‚Äô output, but SVG is already there! Just a few more export controls would be a big win, imo.</p><p>So here‚Äôs a list of options I would love to see:</p><p><strong>1. Export layer names as classes.</strong> <br>Illustrator only supports exporting layer names as <code>id</code>. And then to avoid multiples of the same <code>id</code>, Illustrator will do this:</p>
<pre><code>  &lt;path id=&quot;card&quot;&gt;...&lt;/path&gt;
  &lt;path id=&quot;card-1&quot; data-name=&quot;card&quot;&gt;...&lt;/path&gt;
  &lt;path id=&quot;card-2&quot; data-name=&quot;card&quot;&gt;...&lt;/path&gt;
</code></pre><p>This requires some find-and-replace that takes a couple steps. I‚Äôd much prefer it output like this:</p>
<pre><code>  &lt;path class=&quot;card&quot;&gt;...&lt;/path&gt;
  &lt;path class=&quot;card&quot;&gt;...&lt;/path&gt;
  &lt;path class=&quot;card&quot;&gt;...&lt;/path&gt;
</code></pre><p><strong>2. Namespaced output.</strong> <br>If we‚Äôre doing classes, it might also be cool if we could namespace things. Using the artboard name + layer name makes sense here. Maybe it could output like this:</p>
<pre><code class="language-svg">  &lt;svg id=&quot;birthday&quot;&gt;
    &lt;path class=&quot;card birthday-card&quot;&gt;...&lt;/path&gt;
    &lt;path class=&quot;byline birthday-byline&quot;&gt;...&lt;/path&gt;
  &lt;/svg&gt;
</code></pre><p>Or maybe just like this:</p>
<pre><code class="language-svg">  &lt;svg id=&quot;birthday&quot;&gt;
    &lt;path class=&quot;birthday-card&quot;&gt;...&lt;/path&gt;
    &lt;path class=&quot;birthday-byline&quot;&gt;...&lt;/path&gt;
  &lt;/svg&gt;
</code></pre><p><strong>3. Export with CSS custom properties.</strong> <br>The most obvious case here is theming like light and dark modes. Instead of hex colors, I often want <code>fill</code> and <code>stroke</code> to be something like <code>var(--bg-color)</code> or <code>var(--text-color)</code>. Or <code>currentColor</code> would be great sometimes, too.</p><p>Maybe color swatches could have one more setting for a custom property name and the SVG export could toggle that on or off.</p><p><strong>4. Add <code>&lt;title&gt;</code> and <code>&lt;description&gt;</code> at artboard level.</strong> <br>Illustrator lets you add them at document level, but not artboard. And at least for my workflow, I really don‚Äôt want to maintain multiple files of source artwork.</p><p><strong>5. Optimize on export.</strong> <br>An SVGO integration or something similar makes sense here. Would be great if it was a bit smart. So if you‚Äôve set a <code>&lt;title&gt;</code> for your artboard, the option to strip out the <code>&lt;title&gt;</code> would be unselected automatically, etc.</p><p><strong>6. Set custom width and height.</strong> <br>Illustrator does have a checkbox to export a responsive SVG, but this actually removes the <code>width</code> and <code>height</code> attributes. I usually want to set them to <code>100%</code>.</p><p><strong>7. Toggle other SVG properties.</strong> <br>Not as common a need, but might be nice to add things like <code>preserveAspectRatio</code> or <code>vector-effect</code> with a checkbox on export.</p><p>üôè üôè üôè</p><p>Having these options would rule and make my work a lot easier.</p><p>I know Figma has plugins that help with some of these. <a href="https://www.figma.com/community/plugin/814345141907543603/svg-export">SVG Export</a> provides a way to do <code>currentColor</code> and to export with layer names as classes. Nice. <a href="https://www.figma.com/community/plugin/782713260363070260">Advanced SVG Export</a> uses SVGO to optimize on export. Also nice!</p><p>But to be honest, doing vector work in Figma is extremely not fun for me! Maybe someday. In the meantime, Adobe, let‚Äôs do this.</p>]]></description>
      <pubDate>Sat, 27 Jan 2024 15:45:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/svg-export-wishlist/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/svg-export-wishlist/</guid>
    </item>

    <item>
      <title>The nbsp; was breaking after all</title>
      <description><![CDATA[<p>I‚Äôd been meaning to migrate <a href="https://lynnandtonicblog.com">my blog</a> off <a href="https://wordpress.com">wordpress.com</a> for a long time. I set it up in 2009 and while I still love the ease of not having to maintain a Wordpress install, lots of little things were nudging me to move to something else.</p><p>I didn‚Äôt have much control over the code, which became less of a positive the more my skills and competing tech advanced. To make the changes I could, I had to pay for a plan and a custom CSS upgrade. It wasn‚Äôt a ton of money, but enough to make me question things each time renewal rolled around. And occasionally the theme I was using would get deprecated and I‚Äôd need to choose and customize a different one. But moving over a decade of posts was enough work for me to stay put.</p><p>The thing that tipped it ended up being a non-breaking space. It‚Äôs always something tiny, right?</p><p>For a long time, Wordpress has injected a <code>&amp;nbsp;</code> between the last two words of longer headlines to avoid a widow if the headline wraps. Not sure for how long or if isolated to wordpress.com, but Wordpress was also injecting the <code>&amp;nbsp;</code> into the <code>&lt;meta name=&quot;twitter:text:title&quot;&gt;</code> for social previews.</p><p>This doesn‚Äôt seem to affect things on Twitter, but I‚Äôve moved from Twitter to Mastodon and it does affect things there. The social preview for a recent post was rendering like this on pretty much every Mastodon app I checked:</p><img src='https://lynnandtonic.com/assets/images/thoughts/nbsp-noooo.jpg' width='1200' height='467' alt='screenshot with social image and the title says ‚ÄúMy favorite movies of&nbsp;2022‚Äù' /><p>I talked with wordpress.com customer support and a few Wordpress devs on Mastodon. It wasn‚Äôt something I could fix on my own, so a bug was filed. I didn‚Äôt expect it to be a priority. I really didn‚Äôt want my social previews to look like this and it made me not want to post. So that felt like enough reason to move things, at least temporarily.</p><h2>Choosing Eleventy</h2><p>I‚Äôd also been meaning to try out <a href="https://www.11ty.dev/">Eleventy (11ty)</a> on a personal project. <a href="https://www.zachleat.com/">Zach Leatherman</a> is the coolest and so many folks I admire sing Eleventy‚Äôs praises. Besides not injecting an unremovable <code>&amp;nbsp;</code> into my social previews, Eleventy had some nice benefits:</p><ul><li>Full control over the code and templates</li><li>A static site that will ship way less code to the browser</li><li>Eliminate the additional costs I was paying</li></ul><p>There were a few downsides:</p><ul><li>I‚Äôd lose years of comments I didn‚Äôt plan to move over (probably fine and I could potentially add Webmentions in the future)</li><li>A bit more friction for posting (Wordpress GUI is nice)</li><li>I‚Äôd lose search (more on this later)</li></ul><p>I decided to go for it! <em>/me fist pumping</em></p><h2>The process</h2><p>First I exported my blog content from wordpress.com. They give you a giant XML file. I used <a href="https://daext.com/blog/convert-wordpress-articles-to-markdown/">this article</a> and <a href="https://github.com/lonekorean/wordpress-export-to-markdown">this script</a> to convert the XML to Markdown. Worked great!</p><p>I then started moving the content into <a href="https://github.com/11ty/eleventy-base-blog">eleventy-base-blog</a>. I tried to make it match as closely as possible to my Wordpress template. Wordpress has a bit of a unique vibe so there were a few challenges.</p><h3>URL generation</h3><p>Wordpress generates post URLs with the date and then post title like this <code>/2023/02/23/this-is-the-post-title/</code>. I didn‚Äôt want to structure my post directory like this, so I decided to use <a href="https://www.11ty.dev/docs/permalinks/">permalink</a>. The data export did give me a <code>&lt;link&gt;</code> with the full post URL, but I wanted to try and set things up so old and new posts could use the same stuff and I didn‚Äôt have to duplicate data in the front matter. I created an Eleventy filter that formatted the <code>date</code> this way:</p>
<pre><code>eleventyConfig.addFilter(&quot;pathDate&quot;, dateObj =&gt; {
  return DateTime.fromJSDate(dateObj, {zone: 'utc'}).toFormat(&quot;yyyy/LL/dd&quot;);
})
</code></pre><p>And then set each post‚Äôs front matter like this:</p>
<pre><code>title: This is the post title
date: 2023-02-23
permalink: /{{ date | pathDate }}/{{ title | slug }}/
</code></pre><p>Another thing Wordpress does is make unique slugs for posts with the same titles even if they are posted on different dates. So a post titled <em>Howdy partner</em> might get a URL like <code>/2022/05/06/howdy-partner/</code>. If I published another post a month later also titled <em>Howdy partner</em>, the URL would look like this <code>/2022/06/12/howdy-partner-2/</code>. So I had to manually make sure those posts were accounted for. Something like this:</p><pre><code>permalink: /{{ date | pathDate }}/{{ title | slug }}-2/</code></pre><p>A bit tedious but I got everything working ok.</p><h3>Tags and categories</h3><p>My Wordpress theme was using tags and categories. At one point I think I understood why I made things one or the other. üòÖ I ended up consolidating those into just tags and did some cleanup to make things more consistent.</p><h3>YouTube and other embeds</h3><p>The Wordpress data export included YouTube embeds with Wordpress-specific syntax like this: <code>[youtube=http://youtu.be/VGsRedwDK40]</code>. I had to change those to the proper YouTube embeds (and Vimeo, Instagram, etc). Also some of the videos were no longer available so I found some replacements mostly for my own sake.</p><h3>Full post preview</h3><p>I liked the era of Wordpress where the blog index pages showed the entire post content so you didn‚Äôt have to click into each post. I got that working in Eleventy by using <a href="https://www.11ty.dev/docs/data-frontmatter-customize/#example-parse-excerpts-from-content">excerpt</a> and just making the entire post the excerpt? Probably a better way to do that but it worked.</p><h3>Dates</h3><p>I ran into the <a href="https://www.11ty.dev/docs/dates/#dates-off-by-one-day">dates off by one day</a> issue in a few places. I do not understand timezones! I ended up setting a date and time value separately in the front matter for new posts (with a 9am my time default) and just left off the time for older posts. That seemed to work for what I was doing. Not sure if I‚Äôll run into any issues later, but so far so good.</p><h3>Moved images</h3><p>This isn‚Äôt a Wordpress or Eleventy thing, but another task was moving my images from being hosted on <a href="https://lynnandtonic.com">my portfolio</a> to being hosted with the blog itself. I had originally set it up that way because I was using FTP at the time (ah, memories) and that was easier than using the Wordpress image uploader. This was a helpful decision years later because I just did a nice file move and path replacement locally and didn‚Äôt need to do a big download from wordpress.com.</p><h3>Search</h3><p>Remember when I said I would lose search when I moved to a static site? Well say hello to <a href="https://pagefind.app/">Pagefind</a>! I followed <a href="https://rknight.me/using-pagefind-with-eleventy-for-search/">this handy tutorial by Robb Knight</a> to add Pagefind search to my Eleventy site. Really nice! I tend to think I was the only one using search on my blog but I used it a lot, so happy to have it back in there.</p><h2>What Next?</h2><p>I think I‚Äôm going to start moving my portfolio into Eleventy soon. It‚Äôs a bit more complicated and has its own decade-long baggage. I‚Äôm excited to dig in more and to learn how I could have done things better on the blog. My <a href="https://github.com/lynnandtonic/lynnandtonicblog">blog code is on Github</a> if you want to take a peek for whatever reason! Shout at me if anything is wonky.</p><p>Overall things went really well with the blog though. I‚Äôm liking the setup and the control it offers and I‚Äôm doing the blogging I set out to do. Even if wordpress.com does end up fixing that <code>&amp;nbsp;</code> issue, I don‚Äôt think I‚Äôll go back for now. Big thanks to <a href="https://wordpress.com">wordpress.com</a> for serving my blog for so many years! And thanks to <a href="https://www.11ty.dev/">Eleventy</a> and the 11ty community for the great docs and tutorials!</p><p>Check out <a href="https://lynnandtonicblog.com">my blog</a>, yo! It‚Äôs got an <a href="https://lynnandtonicblog.com/feed/feed.xml">RSS feed</a> too.</p>]]></description>
      <pubDate>Fri, 24 Feb 2023 15:30:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/the-nbsp-was-breaking-after-all/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/the-nbsp-was-breaking-after-all/</guid>
    </item>

    <item>
      <title>Put your name on it</title>
      <description><![CDATA[<p><a href="https://bradfrost.com/blog/post/on-personal-branding/">This 2012 post</a> by Brad Frost was making the rounds and got me thinking about personal branding. I‚Äôm someone who gets pretty anxious thinking about how others ¬†P¬†E¬†R¬†C¬†E¬†I¬†V¬†E¬† me, so it‚Äôs been difficult to follow advice on this topic. The thing that worked pretty well for me was this little bit of direction: Put your name on it.</p><p>A small question to ask myself whenever I decide to work on a project or to publish some words: Do I want my name on this? I love how Brad promotes consistency not in what you talk about but in <em>being yourself</em>. This basic yes/no question helps me to sidestep the existential question of ‚ÄúWho am I though?‚Äù and to focus on making one decision. It‚Äôs a pretty good gut check.</p><p>It‚Äôs helped me to not send an unkind tweet or twenty and to say ‚ÄúNo‚Äù to clients and jobs that made me feel sheepish. It helped push me to be weird and ambitious with my work and‚Äîas Brad encouraged‚Äîto consistently be myself. And after many years, ‚Äúa Lynn Fisher project‚Äù started to mean something in my corner of the web and with teams I worked with. My work started to walk me through doors.</p><p>But it doesn‚Äôt end there. None of that would matter if I was horrible to work with. ‚ÄúPut your name on it‚Äù applies even more to how you treat people. And maybe that‚Äôs all a personal brand is anyway: a different term for your reputation.</p><p>There are definitely projects and interactions‚Äîespecially from early in my career‚ÄîI wish I could remove my name from. I‚Äôll make mistakes. I‚Äôll change. Each new project, job, and relationship lets me decide what it means to put my name on it.</p>]]></description>
      <pubDate>Tue, 21 Feb 2023 16:45:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/put-your-name-on-it/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/put-your-name-on-it/</guid>
    </item>

    <item>
      <title>Unordered, incomplete list of things I want from a job</title>
      <description><![CDATA[<p>In the last three years I‚Äôve worked for three very different companies. This year the tech industry is laying off thousands. I‚Äôve been thinking a lot about jobs. In rougher times it feels risky to ask a lot from your job, but we should. Especially now. So here‚Äôs an unordered, incomplete list of things I want from a job.</p><ul><li>Work that benefits from my specific skills and ideas.</li><li>Work that benefits the people who receive it.</li><li>A salary that enables me to live a comfortable life, to be generous, and to save for retirement.</li><li>The ability to work from the sunny spot of my couch with my dog.</li><li>The ability to take a nap, run errands, or go to the cinema during the workday if I need/want to.</li><li>The flexibility to work in the way I work best and with the tools I choose.</li><li>A team small enough to know everyone personally.</li><li>A team that has fun.</li><li>A team that ships work often.</li><li>The autonomy to make small and big decisions about my work.</li><li>The ability and opportunity to share my work publicly.</li><li>Strategic leadership whose financial decisions I trust.</li><li>Courageous leadership who does the right thing.</li><li>Empathetic leadership who treats people well, even (especially) when it costs the business.</li><li>Good health insurance.</li><li>No implied requirement that I have Opinions‚Ñ¢ about specific web technologies or companies.</li><li>Very few meetings, used effectively.</li><li>Encouragement.</li><li>Generosity.</li><li>Perks that enable me to do more with my time.</li><li>The space to be a vulnerable, flawed human.</li><li>Work that requires creativity.</li><li>Work that offers variety.</li><li>Work that makes me come alive.</li></ul>]]></description>
      <pubDate>Wed, 16 Feb 2023 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/unordered-incomplete-list-of-things-i-want-from-a-job/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/unordered-incomplete-list-of-things-i-want-from-a-job/</guid>
    </item>

    <item>
      <title>Case Study: lynnandtonic.com 2022 refresh</title>
      <description><![CDATA[<p>For a bit there I wasn‚Äôt sure if the refresh was going to happen. Honestly things just weren‚Äôt flowing for me and every idea I tried fell flat. Feeling stuck is just the worst, but a nice thing about a deadline is it forces me to make decisions.</p><p>So I decided to pick a couple new CSS features I‚Äôve been meaning to try and focus on those. It feels like we‚Äôve been wanting container queries forever and <code>:has()</code> is the parent selector we‚Äôve wanted even longer. Easy choices.</p><p>To play around with <code>:has()</code>, I wanted there to be some dynamic aspect so containers could <em>sometimes</em> have a child element. Drag and drop felt like a natural mechanism here. I ran through a lot of ideas where maybe you navigate the site by dropping items onto specific containers. Maybe more content or clues/treasures could be revealed that way. What if the website was an escape room?</p><p>I started playing around with a few drag and drop libraries and <a href="https://bevacqua.github.io/dragula/">Dragula</a> seemed like it could do all that I needed. I essentially wanted an inventory of items you could drag and drop onto specific sections of the site to make things happen. I got a small CodePen demo working with the help of my friend Jason (thanks!).</p><p class="codepen" data-height="300" data-slug-hash="zYaJbbv" data-preview="true" data-user="lynnandtonic" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"><span>See the Pen <a href="https://codepen.io/lynnandtonic/pen/zYaJbbv">Drag and drop test</a> by Lynn Fisher (<a href="https://codepen.io/lynnandtonic">@lynnandtonic</a>) on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><p>It was about here that I ran into a pretty big snag. Accessibility-wise drag and drop can be a bit of a nightmare. There‚Äôs options for making the interactions usable for screen readers and keyboard-only users but for what I was planning, it would have been <em>rough</em>.</p><p>I didn‚Äôt want major navigational and content pieces to be totally inaccessible, so I reduced scope a whole bunch. I decided to make the drag and drop more of an Easter egg, fun enhancement kind of a feature. Content and navigation would stay pretty straightforward. With more time I think I could explore doing something more ambitious and maybe I still will.</p><h2>So what can we do with <code>:has()</code>?</h2><p>Real quick, <code>:has()</code> is a CSS pseudo-class which allows you to select a parent element based on the children it has. So in this example‚Ä¶</p>
<pre><code class="language-html">&lt;section id=&quot;one&quot;&gt;&lt;h2&gt;Hello&lt;/h2&gt;&lt;/section&gt;
&lt;section id=&quot;two&quot;&gt;&lt;h3&gt;Bonjour&lt;/h3&gt;&lt;/section&gt;
</code></pre>
<pre><code class="language-css">section:has(h2) {
  background-color: red;
}
</code></pre><p>‚Ä¶only the first <code>&lt;section&gt;</code> will get a background color of red because it contains an <code>&lt;h2&gt;</code>.</p><p>I still marvel at how dang simple that is now with <code>:has()</code>. Just a gift!</p><p>So with a basic drag and drop, I could selectively give an element a child element. This interaction would allow me to change the parent container or the child‚Äôs siblings however I wanted.</p><p>I thought a lot about video games where you collect items and thought it would be fun to bring some ‚ú®magic‚ú® in the way Super Mario powers up with a mushroom, flower, or leaf.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2022-super-mario-power-ups.svg' width='1200' height='600' loading='lazy' class='wide' alt='Super Mario in various stages of transformation' /><figcaption class='footnote'>Super Mario power-ups</figcaption></figure><p>A mushroom felt like a fun option to make things get bigger and oh hey, kind of a great interaction to pair with container queries. Drop a mushroom, the container grows, things change.</p><p>I went through a lot of other ideas like maybe you could drop a key to unlock something or drop a coin like into an arcade cabinet or drop a slice of pizza for whatever reason. With 10-20 drop zones I had planned, the amount of changes I would need to account for started to make me sweat. So I simplified (the theme of this year I think) to a general ‚Äúmagic potion‚Äù idea that could affect sections in different ways.</p><figure><img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2022-icons.svg' width='550' height='100' loading='lazy' class='wide' alt='group of icons: mushroom, potion, eraser, coin, leaf, gem, key, pizza' style='width: 100%' /><figcaption class='footnote'>Some of the icons I started with.</figcaption></figure><h2>Let‚Äôs set up Dragula</h2><p><a href="https://bevacqua.github.io/dragula/">Dragula</a> is really nice and was easy for me, a forever JS noob, to get running quickly. I won‚Äôt go into too much depth on how Dragula works since their <a href="https://bevacqua.github.io/dragula/">demo</a> and <a href="https://github.com/bevacqua/dragula">README</a> are pretty detailed, but let‚Äôs look at the major things I needed to set up.</p><p>One section would be your inventory of drag and drop items and various other sections of the site would be ‚Äúdrop zones‚Äù that can accept those items. I called the inventory ‚Äúloot‚Äù and gave it classes <code>container</code> and <code>source</code>. Each item in <code>loot</code> got a class of <code>draggable</code>.</p>
<pre><code class="language-html">&lt;div class=&quot;loot container source&quot; id=&quot;loot&quot;&gt;
  &lt;i class=&quot;draggable mushroom&quot; data-id=&quot;mushroom&quot;&gt;
    &lt;svg/&gt;
  &lt;/i&gt;
  &lt;i class=&quot;draggable potion&quot; data-id=&quot;potion&quot;&gt;
    &lt;svg/&gt;
  &lt;/i&gt;
&lt;/div&gt;
</code></pre><p>(By the way, the code in this case study is simplified a bit for clarity, but you can always look at the code in its complicated glory <a href="https://github.com/lynnandtonic/lynnandtonic.com">on GitHub</a>. Also I probably shouldn‚Äôt use an <code>&lt;i&gt;</code> here but I that was an artifact of a previous attempt at something I ended up not using and I did not change it!)</p><p>So then every drop zone would get a class of <code>container</code> and <code>dropzone</code>:</p>
<pre><code class="language-html">&lt;nav class=&quot;container dropzone&quot; id=&quot;nav&quot;&gt;
  &lt;!-- nav content --&gt;
&lt;/nav&gt;
&lt;header class=&quot;container dropzone&quot; id=&quot;header&quot;&gt;
  &lt;!-- header content --&gt;
&lt;/header&gt;
</code></pre><p>In the JavaScript, I‚Äôd set up Dragula like this:</p>
<pre><code>// page elements that are interactive
var loot = '#loot';
var nav = '#nav';
var header = '#header';

// variable
var containers = [
  document.querySelector(loot),
  document.querySelector(nav),
  document.querySelector(header)
];

// Dragula
var drake = dragula({
  containers: containers,
  removeOnSpill: true,
  direction: 'vertical',
  // loot is the source of draggable items
  moves: function (el, source) {
    return source === document.querySelector(loot)
  },
  // when you drag an item, a copy is made
  copy: function (el, source) {
    return source === document.querySelector(loot)
  },
  // any container will accept items except loot
  accepts: function (el, target) {
    return target !== document.querySelector(loot)
  }
});
</code></pre><p>Two significant settings here are <code>copy</code> which makes it so you never run out of mushrooms or potions in your loot, and <code>accepts</code> which makes it so <code>loot</code> is not a drop zone.</p><p>Now we can drag and drop our items. Again here is a <a href="https://codepen.io/lynnandtonic/pen/zYaJbbv">CodePen demo</a> and I‚Äôll go into some specific UX details in a bit.</p><h2>Growing in size</h2><p>To start, let‚Äôs make the homepage hero illustration grow. The markup for that header looks like this:</p>
<pre><code class="language-html">&lt;header class=&quot;header container dropzone&quot;&gt;
  &lt;div class=&quot;svg&quot;&gt;
    &lt;svg /&gt;
  &lt;/div&gt;
&lt;/header&gt;
</code></pre><p>(The <code>&lt;div class=&quot;svg&quot;&gt;</code> helped to isolate the SVG code from having siblings, which was causing some layout issues for me.)</p><p>I set up the CSS so the height of the SVG is set by a variable.</p>
<pre><code class="language-css">.header {
  --header-height: 410px;
}
.header svg {
  width: auto;
  height: var(--header-height);
}
</code></pre><p>So once we‚Äôve dropped the mushroom into the header:</p>
<pre><code class="language-html">&lt;header class=&quot;header container dropzone&quot;&gt;
  &lt;div class=&quot;svg&quot;&gt;
    &lt;svg /&gt;
  &lt;/div&gt;
  &lt;i class=&quot;draggable mushroom&quot; data-id=&quot;mushroom&quot; /&gt;
&lt;/header&gt;
</code></pre><p>We can change the height of the SVG by using <code>:has()</code>:</p>
<pre><code class="language-css">.header:has(.mushroom:not(.gu-transit)) {
  --header-height: 500px;
}
</code></pre><p>Dragula gives the mushroom a class of <code>gu-transit</code> while it‚Äôs being dragged and removes it once it‚Äôs been dropped. So this makes the header <code>500px</code> tall when the header has a mushroom and it‚Äôs no longer in transit.</p><p>This has the effect of the header zooming in size.</p><video class="wide" width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-mushroom-header-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-mushroom-header.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.</video><p>Now, what if you drop <em>another</em> mushroom? Would it just grow bigger and bigger forever with every new mushroom? I liked that idea, but also didn‚Äôt want the site to ever look too wonky. I decided to account for each drop zone accepting two mushrooms and two potions max.</p><p>So knowing we‚Äôll only have two mushrooms ever in the header, we can use <code>:has()</code> with the general sibling combinator to do that:</p>
<pre><code class="language-css">.header:has(.mushroom ~ .mushroom:not(.gu-transit)) {
  --header-height: 600px;
}
</code></pre><p>This makes the SVG <code>600px</code> tall when the header has two mushrooms that are siblings (again, not in transit).</p><p>To add a bit more fun here, I also set up the illustration to have the Diet Dr. Pepper ‚Äúgrow‚Äù as the header grows too. I gave IDs to the artwork layers in the SVG and swap opacity in the same way I set the header height.</p>
<pre><code class="language-css">  .header #soda-can {
    opacity: 1;
  }
  .header #soda-bottle,
  .header #soda-cup {
    opacity: 0;
  }
  .header:has(.mushroom:not(.gu-transit)) #soda-can {
    opacity: 0;
  }
  .header:has(.mushroom:not(.gu-transit)) #soda-bottle {
    opacity: 1;
  }
  .header:has(.mushroom ~ .mushroom:not(.gu-transit)) #soda-bottle {
    opacity: 0;
  }
  .header:has(.mushroom ~ .mushroom:not(.gu-transit)) #soda-cup {
    opacity: 1;
  }
</code></pre>
<img src='https://lynnandtonic.com/assets/images/thoughts/case-study-2022-sodas.jpg' width='1000' height='476' loading='lazy' alt='a Diet Dr. Pepper soda can, bottle, and Big Gulp' /><p>A few other sections of the site do some growing with mushrooms and I also had fun making my noggin grow on the <a href="https://lynnandtonic.com/about">about page</a>:</p><video class="wide" width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-about-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-about.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.</video><h2>Add some container queries</h2><p>Container queries! The loves of my life. With container queries we can make style changes dependent on an element‚Äôs dimensions instead of the entire viewport‚Äôs. I was excited to try them finally.</p><p>On desktop, the projects on the homepage are laid out in 3-columns. When a project gets a mushroom, it changes to take up 2 columns. With another mushroom, it takes up the whole browser width.</p>
<pre><code class="language-css">.projects {
  display: flex;
  flex-wrap: wrap;
}
.project {
  flex-basis: calc(100% / 3);
}
.project:has(.mushroom:not(.gu-transit)) {
  flex-basis: calc((100% / 3) * 2);
}
.project:has(.mushroom ~ .mushroom:not(.gu-transit)) {
  flex-basis: 100%;
}
</code></pre><p>(I‚Äôm using flexbox here so projects grow/shrink as the ones around them grow/shrink.)</p><p>I set up the SVG artwork to have groups that I can show/hide dependent on which containers queries are active. So a group in the SVG would look like this:</p>
<pre><code class="language-svg">&lt;g id=&quot;david7&quot; class=&quot;reveal&quot;&gt;
  &lt;!-- paths here --&gt;
&lt;/g&gt;
</code></pre><p>So for the David Rose project, we can do something like this:</p>
<pre><code class="language-css">.david-rose {
  container-type: inline-size;
}
.reveal {
  opacity: 0;
  transition: opacity 200ms ease-in-out;
}
@container (min-width: 470px) {
  .david-rose #david3,
  .david-rose #david5 {
    opacity: 1;
  }
}
@container (min-width: 750px) {
  .david-rose #david2,
  .david-rose #david6 {
    opacity: 1;
  }
}
@container (min-width: 1100px) {
  .david-rose #david1,
  .david-rose #david {
    opacity: 1;
  }
}
</code></pre><p>And that ends up with this:</p><video class="wide" width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-david-rose-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-david-rose.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.</video><p>Pretty fun! Each project gets a different treatment, so check ‚Äôem out.</p><h2>Fun and color with magic potion</h2><p>The draggable potion works in the same way as the mushroom. Instead of scaling things, the potion brings the illustrations to life with colorful details. There‚Äôs a lot happening, but the main technique is setting variables for things like <code>background-color</code> and text <code>color</code> and resetting those values with <code>:has()</code>. Here‚Äôs a simplified example:</p>
<pre><code class="language-css">.header {
  --bg-color: #ebecf0;
  --text-color: #14303f;
  color: var(--text-color);
  background-color: var(--bg-color);
}
.header:has(.potion:not(.gu-transit)) {
  --bg-color: #ff5f5f;
  --text-color: white;
}
</code></pre><video class="wide" width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-header-potion-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-header-potion.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.</video><p>For sections with artwork, I‚Äôve set up the SVG with various classes like <code>fill-blue</code> and <code>fill-yellow</code> depending on what color they should be when the potion is dropped.</p>
<pre><code class="language-css">:root {
  --yellow: #fabb19;
  --blue: #5d73a3;
  --turquoise: #00ced4;
}
.dropzone:has(.potion:not(.gu-transit)) .fill-yellow {
  fill: var(--yellow);
}
.dropzone:has(.potion:not(.gu-transit)) .fill-blue {
  fill: var(--blue);
}
.dropzone:has(.potion:not(.gu-transit)) .fill-turquoise {
  fill: var(--turquoise);
}
</code></pre><p>A few paths get class <code>fill-swap</code> which receives different colors as the background changes with a second potion. Others get special colors depending on whether light or dark mode are active. And there‚Äôs also a couple sections (like the homepage hero) that change a bit more. Here‚Äôs a quick look at how a few sections change:</p><video class="wide" width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-home-potions-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-home-potions.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.</video><p>The about page illustration is also a fun one:</p><video class="wide" width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-about-potion-poster.jpg"><source src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-about-potion.mp4" type="video/mp4">Sorry, your browser doesn‚Äôt support embedded videos.</video><h2>A few UX details</h2><p>Besides the major drag and drop interactions, there are a few UX considerations needed to polish things:</p><ul><li>When you drag a loot item, you get an outline to indicate where you can drop it. When it‚Äôs full (two mushrooms or two potions), you don‚Äôt get the outline anymore.</li><li>Mushrooms and potions are restyled as little status dots to show you how many things you‚Äôve dropped.</li></ul><img src="https://lynnandtonic.com/assets/images/thoughts/case-study-2022-dots.jpg" alt="arrow pointinga at a row of dots in the upper right corner of a section" width="810" height="390" /><ul><li>You can remove loot from a section by dragging and dropping the eraser. You can remove all loot by hitting the reset button in the footer.</li><li>Your dropped loot should retain from visit to visit (using local storage).</li><li>When this refresh was released, <code>:has()</code> and container queries were not supported by all major browsers. The <code>:has()</code> styles are within an <code>@supports</code> at-rule. The container queries simply do not trigger for browsers that don‚Äôt support them.</li><li>Because Dragula requires JavaScript, the loot section is removed when you have JavaScript disabled.</li><li>There‚Äôs also some subtle style changes between light and dark mode, including different themes for code snippets. I think this might be the first time I like the dark mode theme better.</li></ul><h2>Anything else?</h2><p>I ultimately had a lot of fun with the refresh this year, but gosh I was struggling early on. Probably a few lessons here, but I do appreciate setting deadlines that push me to ship work (even if it‚Äôs not quite what I was hoping for).</p><p>I ran into some issues with my Grunt setup this time around and I may do a mid-year update and move things around. I recently moved my <a href="https://lynnandtonicblog.com/">ancient Wordpress blog</a> I‚Äôm trying to revive into <a href="https://www.11ty.dev/">11ty</a> and it was a nice experience.</p><p>I just love the web and I‚Äôm really excited to see renewed energy around personal sites this year.</p><p>Thanks for reading! üëã See you next year.</p>]]></description>
      <pubDate>Tue, 24 Jan 2023 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/case-study-2022-refresh/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/case-study-2022-refresh/</guid>
    </item>

    <item>
      <title>Some things I worked on at Netlify</title>
      <description><![CDATA[<p>I worked at Netlify for just over a year. I had a pretty unique role on the brand team: making creative web projects developers will love. That part was a lot of fun. Netlify ended up not being the place for me longterm, but it was a privilege to work with many talented and caring people there.</p><p>With my memory and Twitter getting worse by the day, I wanted to keep a record here of some Netlify projects I worked on.</p><h2>Dusty Domains</h2><a href="https://dusty.domains"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-dusty-domains.png" width="1200" height="630" alt="Dusty Domains: Dust off that unused domain for good"></a><p>For December 2021, the team wanted to challenge developers to make something new and deploy to Netlify. Previous planning centered around the weird web (right up my alley), but they needed a hook.</p><p>I brought the idea of encouraging developers to use those domains they‚Äôve purchased that are sitting around collecting dust. Lauren Sell added the idea of each site contributing some money to charity.</p><p>Nine other companies matched Netlify‚Äôs $10k donation and we raised $100k for Code2040, Resilient Coders, STEMTank, and Black Girls Code.</p><p>Visit <a href="https://dusty.domains">dusty.domains</a> to see the sites folks made. And visit <a href="https://thedusting.zone/">thedusting.zone</a> to see the one I made!</p><small>Collaborators: Jason Lengstorf, Charlie Gerard, Phil Hawksworth, Tegan Berry, Lauren Sell,  Prince Wilson, Tara Z. Manicsic</small><hr><h2>Your Year on Netlify</h2><a href="https://your-year-on.netlify.com/"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-your-year.png" width="1200" height="630" alt="Your Year on Netlify 2021" loading="lazy"></a><p>Your Year on Netlify is an end-of-year recap. Developers can log in and see their stats for the year (like total number of builds or how many times they deployed on Friday). I designed the UI to mimic the command line to make it a bit more interactive and did some fun ASCII art to support each section.</p><p>Zach Leatherman was really the brains of this operation both coming up with the project idea and developing an open source web component called <a href="https://github.com/zachleat/squirminal/">Squirminal</a> to produce the command line printing effect. And Laurie Voss did a lot of the heavy lifting in gathering and interpreting a huge amount of data.</p><p>Check it out at <a href="https://your-year-on.netlify.com/">your-year-on.netlify.com</a>. You can experience it with or without logging in.</p><small>Collaborators: Zach Leatherman, Laurie Voss, Tegan Berry, Kelly Tenn, Nino Medina, Justin Chuan, Phil Hawksworth</small><hr><h2>Open source, Open hearts</h2><a href="https://oss.cards"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-oss-love.png" width="1200" height="630" alt="Open Source, Open Hearts: Send a token of appreciation to your favorite OSS developers" loading="lazy"></a><p>For Valentine‚Äôs Day 2022, we made <del>oss.love</del> <a href="https://oss.cards">oss.cards</a>: a way to tell open source developers you appreciate them. A Jason Lengstorf idea with Phil Hawksworth execution made for a really fun project.</p><p>I designed the site and created a bunch of valentine cards featuring the cheesiest developer puns I could think of.</p><p>Visit <del>oss.love</del> <a href="https://oss.cards">oss.cards</a> to check them all out‚Äîand send one to your fave open source folks.</p><small>Collaborators: Phil Hawksworth, Tegan Berry, Jason Lengstorf</small><hr><h2>New Netlify Drop</h2><a href="https://netlify.com/drop"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-drop-og.png" width="1200" height="630" alt="Netlify Drop: Quickly publish your website. Drag &amp; Drop. It‚Äôs online." loading="lazy"></a><p>In a cross-team effort, marketing and engineering pushed out a refresh of Netlify Drop. I was especially excited to work on this feature because it‚Äôs a super approachable way to publish a website. Drag and drop makes it so easy and feels like magic.</p><p>I worked on bringing the page closer in line with current branding and enhancing the interactions with some fun visuals and CSS animations.</p><p>Try out <a href="https://netlify.com/drop">netlify.com/drop</a>.</p><small>Collaborators: Drew Teller, Visakan Jayakumar, Ryan Bonial, Jen Kagan, Kamilah Jenkins, Jack Brewer</small><hr><h2>Matterday</h2><a href="https://matterday.netlify.com/"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-matterday.png" width="1200" height="630" alt="What could you do with an extra day a week? Matterday is the new someday." loading="lazy"></a><p>Research showed that switching to Netlify saved teams a day per week. Jon Meyers from Supabase and I teamed up to make Matterday: a site that asks people to think about and share what they would do with more time.</p><p>I wrote the copy and designed the site with some scrollytelling effects which I wrote about here: <a href="https://lynnandtonic.com/thoughts/entries/fun-css-only-scrolling-effects-for-matterday">Fun CSS-only scrolling effects for Matterday</a>. Jon built the submission flow and sharing gallery, including an approval process for submissions. He‚Äôs awesome.</p><p>Check out <a href="https://matterday.netlify.com/">matterday.netlify.com</a>.</p><small>Collaborators: Jon Meyers (Supabase), Tegan Berry, Stephanie Chung, Netlify Marketing</small><hr><h2>Loading animation</h2><p>For an internal hack day, I created a new loading animation for the Netlify app. The previous version was a spinning logo. It worked, but could be better. With guidance and input from both brand and product design teams, I made this new loader using SVG and CSS animations.</p><p>After it launched a few folks mentioned it was the first time they wished the app loaded slower so they could see more of it.</p><p>I put it on CodePen so folks could watch it loop. üëá</p><p class='codepen' data-height='300' data-default-tab='result' data-slug-hash='oNEjOgW' data-preview='true' data-user='lynnandtonic' style='height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;'><span>See the Pen <a href='https://codepen.io/lynnandtonic/pen/oNEjOgW'><Netlify>loading animation prototype</a> by Lynn Fisher (<a href='https://codepen.io/lynnandtonic'>@lynnandtonic</a>)</Netlify><on><a href='https://codepen.io'>CodePen</a>.</span></on></p><script async src='https://cpwebassets.codepen.iohttps://lynnandtonic.com/assets/embed/ei.js'></script><small>Collaborators: Kristy Marcinova, Diana Perkins, Nathan Rodman, Jason Santa Maria</small><hr><h2>Jamstack Conf</h2><a href="https://jamstack.org/conf"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-jamstack-conf.png" width="1200" height="630" alt="Jamstack Conf, 7-8 November 2022, San Francisco and online" loading="lazy"></a><p>A lot of people worked on this project, but I was responsible for the evolution of the site as event details finalized and creating visual pieces ranging from social images to event signange. I also got to work with <a href="http://www.hellophia.com/">Sophia Foster-Dimino</a> who did the amazing illustration work.</p><p>Wish I could have been at the event, but it was cool to see it all come together from afar.</p><p>Visit <a href="https://jamstack.org/conf">jamstack.org/conf</a>.</p><small>Collaborators: Janet Feldman, Amy Prince, Phil Hawksworth, Jason Lengstorf, Ryan Mulligan, Sophia Foster-Dimino (illustration), Netlify Marketing</small><hr><h2>Swag</h2><p>I also occasionally got to work on some swag! Here‚Äôs a few.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-remix-conf-shirt.jpg" width="1200" height="810" alt="navy shirt with a 3x4 grid of diamonds: most are line drawings of CDs, one is the Netlify gem logo, and one is the RemixConf logo" loading="lazy"><figcaption class="footnote">t-shirt for Remix Conf 2022</figcaption><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-jif-shirt.jpg" width="1200" height="810" alt="navy shirt with the phrase [&amp; array we go]" loading="lazy"><figcaption class="footnote">t-shirt for Jamstack Innovation Fund</figcaption><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-jamhack-shirt.jpg" width="1200" height="810" alt="dark blue shirt with a geometric logo that says Jamhack 2022" loading="lazy"><figcaption class="footnote">logo &amp; t-shirt for Jamhack week</figcaption><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-jamstack-shirt.jpg" width="1200" height="810" alt="pink shirt with a riff on famous Thank You grocery bag design: the outlined word Jamstack is repeated down the front with one instance filled in, below it says ‚ÄúHave a nice deploy‚Äù" loading="lazy"><figcaption class="footnote">t-shirt for Jamstack Conf</figcaption><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/netlify-jamstack-pins.jpg" width="1200" height="810" alt="mockup of enamel pins and stickers with Netlify and Jamstack themes" loading="lazy"><figcaption class="footnote">pins &amp; stickers for Jamstack Conf</figcaption>]]></description>
      <pubDate>Tue, 22 Nov 2022 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/some-things-i-worked-on-at-netlify/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/some-things-i-worked-on-at-netlify/</guid>
    </item>

    <item>
      <title>Fun CSS-only scrolling effects for Matterday</title>
      <description><![CDATA[<p>Last week my team launched a li‚Äôl project called <a href="https://matterday.netlify.com/">Matterday</a>. Turns out switching to Netlify saves development teams one day a week <em>per developer</em>. That‚Äôs a lot of time! And we hope folks can spend that time on things that matter to them.</p>
<p>The narrative portion of the site encourages folks to imagine what they could do with that time ‚Äî whether it be small changes to daily routines or taking big swings. As you know, a narrative-heavy website is just begging for some fun scrolling effects. And since I‚Äôm me, I wanted to see what I could do with just CSS.</p>
<p>I started with a concept I used for <a href="https://web.archive.org/web/20200423144745/https://andyet.com/">a previous version of andyet.com</a> that utilized fixed positioning and z-index to create layered scrolling artwork.</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/andyet-yeti-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/andyet-yeti-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<p>This time around I wanted to explore the idea of layers obscuring and revealing things to create different illusions and to experiment with scroll speeds.</p>
<h2>Creating HTML and CSS layers</h2>
<p>With CSS alone you can‚Äôt inform the page where you are with things like scroll position and triggers (not yet anyway). Elements can‚Äôt be told how to change; they are effectively in one state forever. You could technically have elements animating on a loop, but you wouldn‚Äôt be able to control <em>when</em> in the sequence someone might have it visible in their viewport. So creative layering is the path I took to try and bring some additional interest to static visuals.</p>
<p>The structure of the page can be simplified down to three main layers: <code>.background</code>, <code>.overlay</code>, and <code>.foreground</code> layers. The overlay layer includes the rounded rectangle ‚Äúviewport‚Äù on the left. The background layer includes the patterned backgrounds that show through the viewport layer plus the copy on the right. And finally the foreground includes the pieces of artwork that scroll on top of both previous layers.</p>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-layers.jpg' width='1385' height='695' alt='an annotation labeling the background, overlay, and foreground layers' loading='lazy' />
</figure>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-layers2.jpg' width='1385' height='695' alt='an isomorphic diagram of the layers' loading='lazy' />
</figure>
<p>The background layer is split into two halves, with the background artwork on the left and copy on the right. The markup looks like this:</p>
<pre><code class="language-html">&lt;section class=&quot;the-office&quot;&gt;
  &lt;div class=&quot;background&quot;&gt;
    &lt;div class=&quot;background-container&quot;&gt;
      &lt;div class=&quot;background-artwork&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
      &lt;h3&gt;Watch all 9 seasons of &lt;em&gt;The Office&lt;/em&gt; four times through.&lt;/h3&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>And is rendered like this (shown here with overlay and foreground hidden):</p>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-background.jpg' width='1385' height='695' alt='the site divided in two halves, image on left and text on right' loading='lazy' />
</figure>
<p>I keep adding sections and they create a long page you can scroll through like you would expect:</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/stacked-sections-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/stacked-sections-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<p>The overlay is made of two nested <code>&lt;div&gt;</code>s. The <code>.overlay</code> container has a <code>position: sticky</code> so it stays fixed to the top even as its container scrolls. It uses <code>linear-gradient</code> (shown in the screenshot in red) to obscure the areas above and below the ‚Äúviewport‚Äù and the <code>&lt;div&gt;</code> inside is transparent (to show the background layer beneath). A <code>border-radius</code> and <code>box-shadow</code> provide the viewport‚Äôs rounded rectangle shape.</p>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-overlay.jpg' width='1385' height='695' alt='diagram showing the placement of the overlay' loading='lazy' />
</figure>
<pre><code class="language-html">&lt;div class=&quot;overlay&quot;&gt;
  &lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-css">.overlay {
  --body-bg: #0f6a80;
  --bg-position: calc(50% - 30vh);
  --overlay-w: 35vw;
  --overlay-h: 60vh;
  width: 50%;
  height: 100vh;
  position: sticky;
  top: 0;
  left: 0;
  display: grid;
  place-content: center;
  z-index: 1;
  background-image: linear-gradient(to bottom, var(--body-bg) var(--bg-position),
                                               transparent    var(--bg-position)),
                    linear-gradient(   to top, var(--body-bg) var(--bg-position),
                                               transparent    var(--bg-position));
}
.overlay div {
  width:  var(--overlay-w);
  height: var(--overlay-h);
  border-radius: 1em;
  box-shadow: 0 0 0 .5em var(--body-bg);
}
</code></pre>
<p>We‚Äôve created a little ‚Äúwindow‚Äù for the backgrounds to pass beneath to the left of the content. The fixed background gradient and dot pattern, despite being only on the right side of the page, help the two sides feel cohesive.</p>
<p>So here‚Äôs how the background and content sections scroll before we add in the foreground layers.</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/overlay-sections-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/overlay-sections-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<h2>Parallax visuals</h2>
<p>Now let‚Äôs look at the foreground pieces. The majority of the sections are using a CSS parallax technique using a combination of <code>position</code>, <code>perspective</code>, and 3D <code>transform</code>. This is a pretty tried and true way to have different elements on a page scroll at different speeds. This <a href="https://keithclark.co.uk/articles/pure-css-parallax-websites/">article by Keith Clark</a> and the <a href="https://keithclark.co.uk/articles/pure-css-parallax-websites/demo3/">accompanying demo</a> are super great for dissecting how this works.</p>
<p>I don‚Äôt intend to duplicate Keith‚Äôs tutorial here, so at a high level, what the CSS is doing is moving layers forward and backward in space (with <code>translateZ</code>). This creates visual parallax, where things farther in the distance move slower than those up close to you (like looking at scenery go by outside a car window).</p>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-parallax.jpg' width='1385' height='695' alt='isomorphic diagram showing scale and depth for parallax layers, with layer-3 appearing closer to the viewer and moving faster' loading='lazy' />
</figure>
<p>The parallax structure setup looks something like this (again, I encourage you to read <a href="https://keithclark.co.uk/articles/pure-css-parallax-websites/">Keith‚Äôs awesome tutorial</a>):</p>
<pre><code class="language-html">&lt;div class=&quot;parallax&quot;&gt;
  &lt;section class=&quot;parallax-group&quot;&gt;
    &lt;div class=&quot;parallax-layer&quot;&gt;
      &lt;img /&gt;
    &lt;/div&gt;
  &lt;/section&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-css">.parallax {
  height: 100vh;
  perspective: 300px;
}
.parallax-group {
  height: 100vh;
  transform-style: preserve-3d;
}
.parallax-layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
</code></pre>
<p>After each background/content section, a foreground section is added with class <code>.pieces</code>. That full markup ends up looking something like this:</p>
<pre><code class="language-html">&lt;section class=&quot;parallax-group the-office&quot;&gt;
  &lt;div class=&quot;parallax-layer background&quot;&gt;
    &lt;div class=&quot;background-container&quot;&gt;
      &lt;div class=&quot;background-artwork&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
      &lt;h3&gt;Watch all 9 seasons of &lt;em&gt;The Office&lt;/em&gt; four times through.&lt;/h3&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
&lt;section class=&quot;parallax-group pieces the-office-pieces&quot;&gt;
  &lt;div class=&quot;parallax-layer foreground layer-1&quot;&gt;
    &lt;img src=&quot;/images/the-office-jello.svg&quot; width=&quot;237&quot; height=&quot;148&quot; alt=&quot;a stapler stuck in a Jello mold&quot; class=&quot;jello&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;parallax-layer foreground layer-2&quot;&gt;
    &lt;img src=&quot;/images/paper-airplane.svg&quot; width=&quot;173&quot; height=&quot;215&quot; alt=&quot;paper airplane&quot; class=&quot;airplane&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;parallax-layer foreground layer-3&quot;&gt;
    &lt;img src=&quot;/images/the-office-mug.svg&quot; width=&quot;160&quot; height=&quot;145&quot; alt=&quot;World‚Äôs Best Boss mug&quot; class=&quot;mug&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;parallax-layer foreground layer-2&quot;&gt;
    &lt;img src=&quot;/images/the-office-beet.svg&quot; width=&quot;200&quot; height=&quot;274&quot; alt=&quot;a beet&quot; class=&quot;beet&quot; /&gt;
  &lt;/div&gt;
&lt;/section&gt;
&lt;section class=&quot;parallax-group space-mountain&quot;&gt;
  ...
&lt;/section&gt;
</code></pre>
<p>The demo (and lots of examples you may see) uses the parallax effect on full-width sections which creates a lot of movement. The Matterday site applies the parallax to individual artwork pieces to give them a floating feeling relative to each other. Each of the images is given a ‚Äúdepth‚Äù by setting a different <code>translateZ</code> value. To keep things manageable, I have three values set and assigned to classes that I can apply to individual elements.</p>
<pre><code class="language-css">.parallax-layer.layer-1 {
  transform: translateZ(100px) scale(.71);
}
.parallax-layer.layer-2 {
  transform: translateZ(175px) scale(.5);
}
.parallax-layer.layer-3 {
  transform: translateZ(200px) scale(.5);
}
</code></pre>
<p>To place the artwork next to the content section it supports (the one right above it in the page flow), I add a negative margin to those sections.</p>
<pre><code class="language-css">.parallax-group.pieces {
  margin-top: -100vh;
}
</code></pre>
<p>And then each individual piece is tweaked and positioned within its parent.</p>
<pre><code class="language-css">.the-office-pieces .mug {
  width: 20vw;
  transform: rotate(2deg);
  margin-left: 25vw;
  bottom: -10%;
}
</code></pre>
<p>When layering elements like this, you want to be careful you aren‚Äôt making any content inaccessible. The copy on the page should still be selectable with a mouse. You could add <code>pointer-events: none</code> to the artwork so you can still access the layer below it, but I opted to make the foreground sections half the width of the viewport so they aren‚Äôt overlapping the content at all.</p>
<pre><code class="language-css">.parallax-group.pieces {
  width: 50%;
}
</code></pre>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-foreground-width.jpg' width='1385' height='695' alt='screenshot showing imagery doesn‚Äôt overlap text' loading='lazy' />
</figure>
<p>So in the end, the parallax creates an effect like this:</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/foreground-parallax-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/foreground-parallax-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<p>It creates some nice, subtle movement without feeling like it‚Äôs overwhelming or intense scrolljacking. Next I‚Äôll talk through a few of the specific effects (and some tradeoffs).</p>
<h2>Re-stacking CSS layers for the ‚Äúfocus‚Äù effect</h2>
<p>For the section of the narrative ‚ÄúYou could sharpen your focus,‚Äù I wanted to do a looking glass kind of effect where an element could scroll over a blurry image and focus it. I thought maybe I could lean on CSS <code>filter</code> here or <code>mix-blend-mode</code> or some combination. But because the background and foreground are split up, I had to think about it a bit differently.</p>
<p>The background is set up as normal, but with a handy <code>filter: blur()</code> on it. I also had to <code>scale()</code> it up a wee bit to avoid the feathered edges that CSS blur can cause.</p>
<pre><code class="language-css">.focus .background-artwork .focus-shapes {
  background-image: url('/images/shapes.svg');
  background-size: 130% auto;
  background-position: center center;
  filter: blur(.6em);
  transform: scale(1.3);
}
</code></pre>
<p>The circle effect is made with two foreground layers. The first contains the same background image but not blurred and the second has the teal outline. The effect I wanted was for the circle to pass over the background and ‚Äúfocus‚Äù only while it‚Äôs over the viewport. To achieve this, I applied a lower <code>z-index</code> to the first circle so it sits below the overlay but still above the background layer. Here is the code (simplified a bit):</p>
<pre><code class="language-html">&lt;section class=&quot;parallax-group pieces focus-pieces&quot;&gt;
  &lt;div class=&quot;parallax-layer foreground layer-1&quot;&gt;
    ...
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<pre><code class="language-css">.parallax-group.focus-pieces {
  z-index: 0;
}
/* Remember that the .layer-1 child will have this transform */
.parallax-layer.foreground.layer-1 {
  transform: translateZ(100px) scale(.71);
}
</code></pre>
<p>Both foreground layers are on the same parallax depth (that <code>translateZ</code>) so they move at the same rate and create the illusion of interacting with the background layer.</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/focus-parallax-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/focus-parallax-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<p>One small hiccup here. Safari doesn‚Äôt like this <code>z-index</code> trick. Because of the <code>translateZ</code> on the foreground layers, it won‚Äôt allow for the container to sit below the overlay. A bit of a bummer (but also I get why it behaves that way). Resetting the <code>translateZ</code> does the trick, but then you lose the parallax that makes it feel a tiny bit nicer. So I opted to reset the <code>translateZ</code> only for Safari in this case (you can <a href="https://github.com/netlify/matterday.netlify.com/blob/main/styles/section-focus.css#L96-L117">see the code here</a>, not the nicest CSS I know sorry!).</p>
<h2>Using the CSS parallax speed variations for the receipt printing effect</h2>
<p>The ‚ÄúTime really adds up‚Äù section has a similar thing happening. To make it look like the calculator is printing the receipt, it requires the receipt to ‚Äúgrow‚Äù out from behind the calculator‚Äôs body (farther away) but to move faster (closer). So the receipt gets <code>.layer-2</code> and the calculator front gets <code>.layer-1</code>, but will they layer like we want?</p>
<pre><code class="language-html">&lt;!-- receipt --&gt;
&lt;section class=&quot;parallax-group pieces&quot;&gt;
  &lt;div class=&quot;parallax-layer layer-2&quot;&gt;
    &lt;div class=&quot;addition-receipt&quot;&gt;
      &lt;span&gt;60 min&lt;/span&gt;
      &lt;span&gt;+ 60 min&lt;/span&gt;
      &lt;span class=&quot;total&quot;&gt;120 min&lt;/span&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- calculator front --&gt;
&lt;section class=&quot;parallax-group pieces&quot;&gt;
  &lt;div class=&quot;parallax-layer layer-1&quot;&gt;
    &lt;img src=&quot;/images/addition-front.svg&quot; width=&quot;330&quot; height=&quot;374&quot; alt=&quot;addition machine&quot; /&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>Yes! Mostly. Luckily because the <code>.layer-2</code> receipt comes first in the markup before the <code>.layer-1</code>, the receipt sits behind the calculator front (except for in Safari which again requires <a href="https://github.com/netlify/matterday.netlify.com/blob/main/styles/section-adds-up.css#L98-L108">some specific fixes</a>).</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/calculator-parallax-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/calculator-parallax-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<p>The gradient trails below the calculator serve the purpose of obscuring the long receipt when needed. Because the artwork is using <code>vw</code> units to scale depending on the width of the browser, if the window is taller than it is wide, the receipt would sometimes show.</p>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-receipt.jpg' width='1284' height='695' alt='bottom of receipt can be seen below calculator and a label says ‚ÄúNoooo‚Äù' loading='lazy' />
</figure>
<p>There‚Äôs probably better ways to deal with this, but just gotta ship sometimes. Turns out responsive design can be tricky! So many conditions to consider. üòÖ</p>
<h2>Using cutout images for the ‚ÄúSomeday‚Äù list effect</h2>
<p>Finally, a pretty simple but fun detail from the ‚ÄúYou could take items off the backburner‚Äù section. It features a Trello-like list of items with pill labels that appear empty at first. As you scroll, each pill turns teal with a ‚ÄúReady‚Äù label.</p>
<video width="100%" preload="metadata" loop controls playsinline poster="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/someday-list-video-poster.jpg">
  <source src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/videos/someday-list-optimized.mp4" type="video/mp4">
  Sorry, your browser doesn‚Äôt support embedded videos.
</video>
<p>This is achieved with some artwork prep. The pill shapes are cut out from the list ‚Äúcontainer‚Äù so it reveals whatever is behind it. The ‚ÄúReady‚Äù text is the same color as the dark background so you can‚Äôt see it until the artwork is above the teal. No CSS needed, the image is doing the lifting here.</p>
<figure>
  <img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/matterday/diagram-someday-list.jpg' width='1385' height='695' alt='the ‚ÄúReady‚Äù label is only visible with a light background color' loading='lazy' />
</figure>
<h2>But why use CSS instead of JavaScript?</h2>
<p>Why do it like this? I love trying new things with CSS. It‚Äôs powerful and there are so many cool techniques to experiment with. For most animated scroll experiences, <a href="https://greensock.com/">Green Sock</a> really is king and we recently used the heck out of it for the <a href="https://www.netlify.com/">Netlify homepage</a> (shoutout to <a href="https://justinchuan.com/">Justin</a>, <a href="https://ryanmulligan.dev/">Ryan</a>, and <a href="https://samtan.dev/">Sam</a> for amazing work there). So I figured, why not take a stab at something different? It‚Äôs just really fun.</p>
<h2>More related to Matterday</h2>
<ul>
<li>Check out how the CSS parallax scrolling works for yourself! The code is <a href="https://github.com/netlify/matterday.netlify.com">public on GitHub</a>.</li>
<li><a href="https://matterday.netlify.com/#share">Share what you would do with your Matterday.</a></li>
<li>We collaborated with the team at <a href="https://supabase.com">Supabase</a> on this project (which was just delightful), and <a href="https://twitter.com/jonmeyers_io">Jon Meyers</a> published a <a href="https://jonmeyers.io/blog/how-i-built-the-back-end-for-netlify's-matterday-project-with-supabase">write-up on how the back-end of Matterday works</a>. Check it out!</li>
<li>You can also calculate the value of your team‚Äôs savings with Netlify‚Äôs <a href="https://www.netlify.com/roi-calculator/">new ROI calculator</a>!</li>
</ul>
<p>Thanks for reading! üëã</p>
<p>¬∑¬∑¬∑</p>
<small>This was originally published on <a href="https://netlify.com/blog/fun-parallax-scrolling-css-for-matterday">netlify.com/blog</a>.</small>]]></description>
      <pubDate>Wed, 15 Jun 2022 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/fun-css-only-scrolling-effects-for-matterday/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/fun-css-only-scrolling-effects-for-matterday/</guid>
    </item>

    <item>
      <title>Case Study: lynnandtonic.com 2021 refresh</title>
      <description><![CDATA[<p>For this year‚Äôs refresh, I really wanted to tackle an idea I‚Äôve been trying to do for years. In my <a href="https://lynnandtonic.com/thoughts/entries/case-study-2018-refresh/">2018</a> and <a href="https://lynnandtonic.com/thoughts/entries/case-study-2019-refresh/">2019</a> case studies, I talked about an experience that feels like you‚Äôre traveling through physical space. I imagined a mix between walking forward in a first person video game and the layered, parallax effect Disney innovated (as seen in the <a href="https://youtu.be/x2rDrKUb6bM">intro of Beauty and Beast</a>). And as with years past, I wanted you to experience this by resizing the browser window.</p><p>Spoiler: I finally made it work. Here‚Äôs a screen recording from <a href="https://twitter.com/ericvanholtz">Eric Van Holtz</a> that shows the final resizing experience (plus a few extra interactions):</p><blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">&quot;Wonderful Weirdos of the Web&quot; are welcomed to resize their browsers in another epic <a href="https://twitter.com/lynnandtonic?ref_src=twsrc%5Etfw">@lynnandtonic</a> portfolio redesign.<a href="https://t.co/008ze5ojvi">https://t.co/008ze5ojvi</a> ü§Ø <a href="https://t.co/5YvhccjFDa">pic.twitter.com/5YvhccjFDa</a></p>&mdash; Eric Van Holtz (@ericvanholtz) <a href="https://twitter.com/ericvanholtz/status/1471580258893799430?ref_src=twsrc%5Etfw">December 16, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2>How it works</h2><p>This effect is ultimately created by ‚Äústacking‚Äù a bunch of SVGs on top of each other and then scaling and showing/hiding them in sequence as you resize the browser.</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-layers.svg' width='1200' height='720' alt='a diagram of four stacked layers labeled scenes 1-4 and an arrow that passes through the layers via cutouts' loading='lazy' /><figcaption>Transitions between scenes happen through cutouts.</figcaption></figure><p>I always hoped I could achieve this experience with CSS alone, but every time I attempted it I ran into big performance issues. To make the artwork scale inversely to the browser width, I could set something like: <code>height: calc(1200px - 100vw)</code>.</p><p>This works <em>mostly</em> fine on its own, but as the artwork became more layered and complicated, the more the effect broke down. As you resized, the browser would stop rendering the changes. Then once you stopped resizing, it would ‚Äúcatch up‚Äù and render the final state. Because the experience relies on things changing as smoothly and as real-time as possible, this just wasn‚Äôt going to work.</p><p>This was even before I started experimenting with blur effects. To make the effect feel more real, I wanted objects to blur and focus as they moved closer/farther away. I could do this with something like <code>filter: blur(1vw)</code> but this made browsers actually crash once I started resizing. Whoopsies.</p><p>I tried a few other things like using <code>clamp</code> (which worked ok for scaling but didn‚Äôt provide the level of control I needed) and setting tons of media queries in sequence (which has worked in the past for me, but would become very unwieldy with this one).</p><p>So I was about ready to throw in the towel until <a href="https://twitter.com/ScottKellum/status/1462644662099853318">Scott Kellum tweeted at me</a> and asked if something like <a href="https://typetura.com/">Typetura</a> could help. And it was like the clouds parting and I could finally feel the warm sun on my weary face. üôè</p><p>Typetura uses a bit of JavaScript and makes flexible, responsive web typography a breeze (and as it turns out, zooming animations too). It was an especially nice solution here because I was still able to do all of my work in the CSS.</p><p>It allows you to set a <code>max-width</code> plus CSS animation <code>keyframes</code> and will interpolate between them as you resize the browser. So for the scaling of a layer of artwork, I could do something like this:</p>
<pre><code>svg {
  --tt-max: 3000;
  --tt-key: scene0;
  --tt-ease: cubic-bezier(.17,.67,.24,.97);
  height: 300vh;
}
  
@keyframes scene0 {
  0% {
    height: 2400vh;
  }
  43%, 100% {
    height: 5vh;
  }
}
</code></pre>
<p>I‚Äôm setting three Typetura custom properties for the <code>svg</code>:</p><ul><li><code>--tt-max</code> sets a <code>max-width</code> of 3000px here (which serves as the endpoint for the animation)</li><li><code>--tt-key</code> associates the selector with the keyframe animation</li><li><code>--tt-ease</code> sets the <code>animation-timing-function</code></li></ul><p>The animation for <code>scene0</code> sets two height values at different keyframes for Typetura to animate between. At 0% (0px wide), the artwork will be 2400vh tall and as you scale the browser window wider, the artwork will shrink to 5vh tall around 1290px browser width (43% of the 3000px max-width).</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-timeline.svg' width='1200' height='439' alt='a timeline that plots scene0, showing it as 2400vh tall at 0px browser width and 5vh at 1290px browser width' loading='lazy' /><figcaption>Scaling duration for scene0.</figcaption></figure><p>You might be wondering why I didn‚Äôt set <code>--tt-max</code> to 1290px then? I started things that way (with each scene having its own max-width), but soon found it difficult to quickly grok when things were happening. 50% meant something different for each scene. It was much easier to wrap my head around the entire sequence as one long timeline where any keyframe could be compared to another.</p><p>So I set the <code>--tt-max</code> just once (I dropped it under the body class <code>.home</code> in case I wanted to change it for different pages).</p>
<pre><code>  .home {
    --tt-max: 3000;
  }
</code></pre>
<p>This allowed me to easily ‚Äúplace‚Äù and stagger transitions along the main timeline spread across different elements. Here‚Äôs a simplified example of the door in the desert scene and the timing for when the scene appears and when the window pane becomes opaque (two separate layers):</p>
<pre><code>  @keyframes window {
    0%, 37.5% {
      opacity: 0;
    }
    39.5% {
      opacity: 1;
    }
  }

  @keyframes scene2 {
    0%, 37% {
      opacity: 0;
    }
    37.6% {
      opacity: 1;
    }
  }
</code></pre>
<p>And here‚Äôs a visualization of what the staggered animations look like along the global timeline:</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-timeline2.svg' width='1200' height='439' alt='a timeline that shows the staggered animation keyframes for window and scene2' loading='lazy' /></figure><p>So from here, any animatable CSS property became fair game, so I was able to use <code>opacity</code> to fade things, <code>transform</code> to move things (like opening and closing the elevator doors), and <code>filter</code> to create blur effects like I mentioned earlier:</p>
<pre><code>@keyframes scene1 {
  20% {
    filter: blur(0);
  }
  25% {
    filter: blur(22em);
  }
  28% {
    filter: blur(0);
  }
}
</code></pre>
<p>Or especially fun was one transition that animates between color and grayscale:</p>
<pre><code>@keyframes scene3 {
  45.6% {
    filter: grayscale(0);
  }
  50%, 100% {
    filter: grayscale(100%);
  }
}
</code></pre>
<p>Here‚Äôs what that looks like in action:</p><blockquote class="twitter-tweet" data-conversation="none" data-dnt="true"><p lang="en" dir="ltr">That transition from color to black and white. *chef‚Äôs kiss* Incredible! <a href="https://t.co/BTXpj8GNOj">pic.twitter.com/BTXpj8GNOj</a></p>&mdash; Scott Kellum (@ScottKellum) <a href="https://twitter.com/ScottKellum/status/1471537900512677888?ref_src=twsrc%5Etfw">December 16, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Typetura made the calculations and animations so easy to manage that I was able to spend most of my time illustrating and working out the small details with each scene transition. (Also big hat tip to <a href="https://lea.verou.me/">Lea Verou</a> for her <a href="https://cubic-bezier.com/">cubic bezier tool</a> which I used a bunch.)</p><h2>Creating the artwork sequence</h2><p>So I‚Äôve jumped ahead a wee bit. Once I figured out I <em>could</em> do this, I actually spent a lot of time figuring out what <em>this</em> even was. I had about 2500px of browser width to account for and I wasn‚Äôt sure how many different scenes and transitions I would need.</p><p>My initial thought was to have three scenes starting with a super wide view of an outdoor landscape zooming into a building far off in the distance and then into a computer screen inside that room. But with some initial tests, zooming a ‚Äúfar distance‚Äù felt like it took <em>forever</em> and not enough was changing to make it interesting.</p><p>So I shifted to one-point perspective ‚Äúrooms‚Äù you could move through quickly. The living room zooming out through a window was the first transition I figured out. You should have seen the cheering I did once it worked.</p><div><video controls preload='none' poster='https://lynnandtonic.com/assets/images/thoughts/case-study-2021-window-placeholder.png'><source src='https://lynnandtonic.com/assets/images/thoughts/case-study-2021-window.mp4' type='video/mp4'><p>Sorry, your browser doesn't support embedded videos.</p></video></div><p>And from there I figured out the next scene and then the next and the next. I probably should have made a storyboard but I didn‚Äôt!</p><p>I did make a list of ideas and inspiration which included surrealism, <em>Centaurworld</em>, Wes Anderson films, the Marvel series <em>Loki</em> and <em>WandaVision</em>, and <em>The Scary Door</em> (the <em>Futurama</em> parody of <em>The Twilight Zone</em>).</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-inspiration.png' width='1200' height='634' alt='screenshots from Centaurworld, The Grand Budapest Hotel, The French Disptach, Loki, WandaVision, The Scary Door, and a surrealist painting' loading='lazy' /></figure><p>It was fun coming up with the different rooms to visit and various ‚Äúwindows‚Äù you would travel through (like a television screen or elevator). A few ideas and transitions that didn‚Äôt make it in:</p><ul><li>room of clouds</li><li>TRON-like virtual room</li><li>room where everything is upside down</li><li>snowglobe transition</li><li>Stargate or Dr. Strange portal transition</li><li>‚Äúthrough the looking glass‚Äù transition</li></ul><p>Maybe for another time. üòâ</p><h2>Challenges</h2><p>As easy as Typetura made this process, I still ran into some weird behavior and gotchas.</p><p><strong>Scenes needed to be top level, inline SVG.</strong> <br>If the SVGs were <code>&lt;img&gt;</code>s, some browers would rasterize them when scaling. This helps a ton with performance, but was exactly the opposite of what I wanted to happen! So inline they went.</p><p>I also found if I wrapped the SVG with a containing <code>&lt;div&gt;</code> (for namespacing purposes) and applied transforms to the <code>&lt;div&gt;</code> instead, the scaling and transitions started to choke again. So that was out. I guess I could have still applied the transforms to the SVG and left the <code>&lt;div&gt;</code> there solely for the organizational benefit but that felt weird!</p><p>If anyone was digging into my CSS for this (which you can do on <a href="https://github.com/lynnandtonic/lynnandtonic.com/blob/main/_styl/pages/home.styl">GitHub</a>), this is why I‚Äôm using <code>svg:nth-of-type(5)</code> instead of class names for many of the scenes. This is not great but it allowed me to import the SVG into my <code>index.pug</code> file like this:</p>
<pre><code>  main
    include ../_assets/images/scene0-stars.svg
    include ../_assets/images/scene0.svg
    .airplanes
      include ../_assets/images/scene0-airplane.svg
      include ../_assets/images/scene0-airplane2.svg
    .reflection
    include ../_assets/images/scene1.svg
    .window
    include ../_assets/images/scene2.svg
    ...
</code></pre>
<p>This is definitely a <em>me</em> problem. I wanted to use the SVG directly exported from Illustrator without needing to move or edit any code or having to reorganize my Illustrator layers (yikes üò±). This way I could make changes, export, and preview really quickly which I needed to do many, many times.</p><p><strong>Balancing visual interest and file size.</strong> <br>I wanted the illustrations to feel fun, whimsical, and detailed while maintaining a reasonable file size. To minimize points and reduce complexity, I tried to stick with rectangles, ellipses, efficient lines, basic strokes, and solid blocks of color everywhere possible. Brushes and textures were off limits. A good, but challenging constraint.</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-visuals.png' width='1200' height='1123' alt='screenshots of illustrations from the site including a slice of pizze under a cloche in space, a living room, a surrealist door in a desert, and an elevator lobby' loading='lazy' /></figure><p><strong>So many screen sizes.</strong> <br>When you actively encourage people to resize your website you better prepare for the weird dimensions! Throughout this process, I had multiple windows open on my laptop and monitor, making sure each scene and transition made sense for narrow, wide, short, and tall windows. The one place where things really started to break is really wide + super short: a very special aspect ratio where you can start to see the edges of the artwork. I did a wee bit of extending widths for some scenes, but for the most part let it ride.</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-short-screen.png' width='1200' height='431' alt='browser that is very wide but very short: artwork of an elevator lobbby doesn‚Äôt fill the entire view and the blue background is showing at the right and left edges; arrows and sad emoji label those areas' loading='lazy' /><figcaption>~1425px by 345px browser size</figcaption></figure><p><strong>Mobile. Confusion.</strong> <br>As with past years, you need a browser that can resize to experience the fun. So the site on a phone isn‚Äôt <em>broken</em>, but it can be confusing if you got there by word of mouth. (I am exploring a way for you to watch the sequence without resizing your browser, stay tuned.)</p><p>This version of the site also has a really high chance you land on a weird inbetween state. My friend Kate arrived at the site to see a Pop-Tart against a black background. She suggested I add a little note to encourage folks to resize their browser, which does help. But! I also don‚Äôt mind a little bit of initial confusion in this case.</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-pop-tart.png' width='1200' height='668' alt='screenshot of a website that‚Äôs just a black background and a random Pop-Tart' loading='lazy' /><figcaption>Very cool website ya got there.</figcaption></figure><p>A few other things I considered:</p><ul><li>With Typetura, I needed to be ok with the experience requiring JavaScript. I love a CSS-only effect, but this one benefited so much from the JS assist that it felt worth it. Also, if <a href="https://css.oddbird.net/rwd/interpolation/">interpolated values</a> made it into the CSS spec that would be extremely cool.</li><li>Screenreaders felt like a bit of an unknown for me on this one. I ended up including a visually-hidden step-by-step description of the sequence.</li><li>I also thought a lot about motion. Is this a scenario that needs a motion warning? Or should I be using a <code>prefers-reduced-motion</code> query? The animations are all triggered by resizing the browser where you control the speed and duration. I wasn‚Äôt sure and I‚Äôm still not?</li></ul><h2>Anything else?</h2><p>The monitor scene at the largest width has a few fun Easter eggs. These were a last minute addition and I‚Äôm glad they made it in! It helped me learn a bit more about fine tuning exports from Illustrator and using JavaScript inside SVG.</p><figure><img src='https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2021-desktop.jpg' width='1200' height='634' alt='illustration of a monitor on a desktop with various windows open, some prints are taped to the wall behind' loading='lazy' /><figcaption>A scene with some hidden gems.</figcaption></figure><p>It was fun dusting off my timeline animation skills I haven‚Äôt used much since the ol‚Äô Flash days. I still don‚Äôt think I <em>totally</em> understand bezier curves, but I got much better at predicting how they would behave.</p><p>With the end of year deadline looming, the rest of the site got a new coat of paint but not much else changed structurally. I did get to try out variable fonts and do some small optimizations where I could, so that feels like a win too.</p><p>At the end of the day I‚Äôm still tickled I was able to achieve the landing page I‚Äôve been thinking about for years. I‚Äôm again reminded of how the web is such a cool medium and I just love building for it.</p><p>As always, previous versions of the site are still viewable in <a href="https://lynnandtonic.com/archive">the archive</a>.</p><p>Until next year‚Äôs refresh. üëã Thanks for reading!</p>]]></description>
      <pubDate>Tue, 11 Jan 2022 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/case-study-2021-refresh/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/case-study-2021-refresh/</guid>
    </item>

    <item>
      <title>Fixing a design flaw that‚Äôs also an industry standard</title>
      <description><![CDATA[<p>We recently replaced the countertops in our kitchen and so naturally, we also installed a new sink. After some research, we went with a ledge workstation sink from <a href="https://www.creategoodsinks.com/">Create Good Sinks</a>.</p><figure class="wide"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/creategoodsinks-product.jpg" width="1200" height="498" alt="a stainless steel undermount kitchen sink with a built-in ledge that holds a cutting board"><figcaption class="footnote">Not my sink, but you get the gist!</figcaption></figure><p>They‚Äôre pricey! But your kitchen sink is something you will likely never replace again (especially if it‚Äôs undermount) <em>and</em> it‚Äôs the tool in your kitchen you use the most. So we splurged.</p><p>The ledge workstation features are nice, but what made it worth the extra money is it fixes an almost universal kitchen sink design flaw (at least in the US).</p><p>Chris Coyier actually describes this design flaw nicely in <a href="https://chriscoyier.net/2021/06/04/40-for-40/">a recent blog post</a>:</p><blockquote><p>It shouldn‚Äôt be so hard to replace the rubber splash guard on sink garbage disposals. You need to be a friggin master plumber to get at that thing, and yet it‚Äôs the thing that gets gross and needs replacing the most. It‚Äôs a conspiracy.</p></blockquote><p>It‚Äôs true! But it‚Äôs also <em>the standard</em>.</p><p>Our new sink was designed to eliminate the permanently-puttied sink ring that catches all the gunk.</p><figure class="wide"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/creategoodsinks-drain.jpg" width="1200" height="408" alt="comparison shot of typical, gunky sink drain and a clean, seamless design" loading="lazy"></figure><p>And it makes the splash guard easily removable so you can wash it by hand or put it in the dishwasher. üôÄüòª</p><picture><source srcset="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/creategoodsinks-fallback.jpg" media="(prefers-reduced-motion: reduce)"><img srcset="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/creategoodsinks.gif" alt="person removes splash guard from sink and rinses it under faucet"></picture><p>Believe me when I say I sometimes just stand in my kitchen to admire this. It‚Äôs a perfect example of asking ‚ÄúWhy the heck is it like this?‚Äù and making a much needed improvement.</p><p>But changing an industry standard has consequences!</p><p>The sink comes with a special drain kit that enables attachment to the most popular brands of garbage disposals. The plumber we hired (a lifelong tradesman) had to read instructions to install our disposal. This is something he could normally do with his eyes closed. He said he appreciated the challenge, but I can imagine not everyone would.</p><p>There‚Äôs also the problem of future problems. If something goes wrong or breaks, I can‚Äôt roll down to Home Depot and pick up a replacement. It‚Äôll take a special order from this specific company and what if they eventually go out of business? What then?</p><p>And if I ever sell this house, the next person won‚Äôt know the sink‚Äôs features (and potential issues) unless I leave them some documentation.</p><p>Fixing this design flaw (and changing the standard) affects the people who interact with it and the other tools that integrate with it. There‚Äôs absolutely risk in moving away from what people have been trained to expect.</p><p>For this decision, the ripple of influence felt small as I weighed the tradeoffs. Can I convince a plumber to try a new technique or am I prepared to do this myself? Am I willing to bet on the future of a random sink company in Ohio or to buy extra parts in anticipation of needing them?</p><p>In the end I was ready to risk these things. Popping that splash guard out to clean it is so nice. And the seamless drain pleases my design sensibilities every single day.</p><p>Ideally this design fix and selling point <em>becomes</em> the standard. Kitchen sink users, we deserve better. Kitchen sink designers, it‚Äôs not too late to improve a lasting design.</p>]]></description>
      <pubDate>Mon, 07 Jun 2021 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/fixing-a-design-flaw-thats-also-an-industry-standard/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/fixing-a-design-flaw-thats-also-an-industry-standard/</guid>
    </item>

    <item>
      <title>Case Study: lynnandtonic.com 2020 refresh</title>
      <description><![CDATA[<p>This is a long one, so here‚Äôs some jump links if you‚Äôre looking for something specific:</p><ul><li><a href="#proof-of-concept">Folding header proof of concept</a></li><li><a href="#creating-the-artwork">Creating the header artwork</a></li><li><a href="#details">Details make the illusion</a></li><li><a href="#pull-tabs">Pull-tabs</a></li><li><a href="#changing-portraits">About page changing portraits</a></li></ul></small><hr><p>Over the past few years, my portfolio‚Äôs homepage has served as a playground where I can experiment with using the browser in creative ways.</p><p>In 2017, I explored the idea that a site doesn‚Äôt need to look the same on every device or for every person by giving it <a href="https://lynnandtonic.com/thoughts/entries/case-study-2017-refresh/">a new layout every 100 pixels</a>. In 2018, I tried using the browser as <a href="https://lynnandtonic.com/thoughts/entries/case-study-2018-refresh/">an animation compiler</a>. And in 2019, I treated the browser as a physical space, <a href="https://lynnandtonic.com/thoughts/entries/case-study-2019-refresh/">able to contain more and more as it grows</a>.</p><p>This time around I knew I wanted to continue this exploration, but I also wanted to reunify the homepage with the rest of the site for a more cohesive experience. I decided to use more expected layout conventions like a decorative header, full-width but separated content sections, and regular old scrolling.</p><p>But how to make that exciting (both to design/build and to ultimately view)?</p><h2 id="inspirtion">Some inspiration</h2><p>Earlier this year, I‚Äôd been experimenting with paper effects. I created a handful of pens on CodePen that (with a containing <code>&lt;div&gt;</code>  and some styling) could turn an image into <a href="https://codepen.io/lynnandtonic/pen/PoZpjOr">a folded poster</a>, <a href="https://codepen.io/lynnandtonic/pen/dyGjvLB">leaning cards</a>, <a href="https://codepen.io/lynnandtonic/pen/JjGmrBz">a coffee table book</a>, or <a href="https://codepen.io/lynnandtonic/pen/XWXgwBQ">a trapper keeper</a>.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-paper-effects.jpg" width="1200" height="700" alt="photos of Schitt‚Äôs Creek and the Good Place casts with and without photo effects applied"><p>And I contributed to <a href="https://stylestage.dev">Style Stage</a> with a stylesheet that turned the page into a folded paper instruction manual.</p><figure class="wide"><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-style-stage.jpg" width="1200" height="683" alt="website styled like a folded paper manual" loading="lazy"><figcaption class="footnote"><a href="https://stylestage.dev/styles/manual/">Manual</a> on Style Stage</figcaption></figure><p>I liked the idea of treating page elements like paper: light but rigid, foldable, and layered to make cool effect. In the physical world, this is most magically realized in pop-up books.</p><p>So I went down a rabbit hole of pop-up folding techniques and paper construction. I watched tons of videos on <a href="https://www.youtube.com/channel/UCx2M2bGHtXBszG6tuR_NIbQ">The Pop-Up Channel</a> on YouTube where Duncan Birmingham talks through and demonstrates every pop-up technique you can imagine. It‚Äôs amazing.</p><figure><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-the-pop-up-channel.jpg" width="800" height="450" alt="Duncan Birminham holding a pop-up card of a lion‚Äôs face" loading="lazy"><figcaption class="footnote">Duncan Birmingham, pop-up badass.</figcaption></figure><p>I immediately knew I wanted to do pull-tabs. The dissolve technique seemed like a fun challenge to accomplish with code (more on that later). The header felt like a good spot to recreate folding pop-up mechanics. So I dug in.</p><p>After some frustrated blank-stare-at-the-screen days, I remembered those cool Al Jaffee fold-ins from Mad Magazine and then remembered a cool demo from developer Thomas Park who <a href="https://thomaspark.co/2020/06/the-mad-magazine-fold-in-effect-in-css/">recreated the fold-in effect in CSS</a>. So neat.</p><figure><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-mad-magazine.jpg" width="800" height="708" alt="Mad Magazine illustration of a butterfly that becomes Elvis when the edge is folded into the center" loading="lazy"><figcaption class="footnote">An Al Jaffee fold-in plus <a href="https://13thdimension.com/13-mad-fold-ins-an-al-jaffee-celebration/">twelve others</a>.</figcaption></figure><p>Thomas‚Äôs technique uses 3D transforms on hover, but I wanted the fold to happen slowly as you resize the browser window. So there were two things to figure out: how to make the fold feel realistic and writing a sentence that made sense as words disappeared at two separate fold points.</p><h2 id="proof-of-concept">A proof of concept</h2><p>I started in CodePen, using some same-sized images to figure out the fold mechanics. Here‚Äôs the original pen if you want to tinker, but I‚Äôll describe what‚Äôs happening here.</p><div class="wide"><p class="codepen" data-height="450" data-theme-id="dark" data-default-tab="result" data-user="lynnandtonic" data-slug-hash="2d891f02e444c86b13e7448a3ef10242" data-preview="true" style="height: 336px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="2d891f02e444c86b13e7448a3ef10242"><span>See the Pen <a href="https://codepen.io/lynnandtonic/pen/2d891f02e444c86b13e7448a3ef10242">2d891f02e444c86b13e7448a3ef10242</a> by Lynn Fisher (<a href="https://codepen.io/lynnandtonic">@lynnandtonic</a>)on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></div><p>Because I wanted the header to fold two separate times, there are three <code>.panel</code> containers with <code>.left</code> and <code>.right</code> children, each containing an image. The markup looks like this:</p>
<pre><code class="language-html">  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;panel&quot;&gt;
      &lt;div class=&quot;left&quot;&gt;
        &lt;img src=&quot;tahani.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;div class=&quot;right&quot;&gt;
        &lt;img src=&quot;jason.jpg&quot; /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;panel&quot;&gt;
      &lt;div class=&quot;left&quot;&gt;
        &lt;img src=&quot;michael.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;div class=&quot;right&quot;&gt;
        &lt;img src=&quot;eleanor.jpg&quot; /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;panel&quot;&gt;
      &lt;div class=&quot;left&quot;&gt;
        &lt;img src=&quot;chidi.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;div class=&quot;right&quot;&gt;
        &lt;img src=&quot;janet.jpg&quot; /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</code></pre>
<p>This uses the technique from my <a href="href='https://lynnandtonic.com/thoughts/entries/case-study-2019-refresh/">2019 refresh</a> with a few modifications. I originally thought I could use flexbox alone for this (which got things about 97% of the way there), but to eliminate small but unacceptable-to-me differences cross-browser, using positioning worked best.</p><p>For the first <code>.panel</code>, the <code>.left</code> and <code>.right</code> are given a width and positioned absolutely to the left and right of the container.</p>
<pre><code class="language-css">  .panel:first-child {
    .left,
    .right {
      width: 210px
      position: absolute;
    }
    .left {
      left: 0;
    }
    .right {
      right: 0;
    }
  }
</code></pre>
<p>For the next <code>.panel</code>, we want the <code>.left</code> and <code>.right</code> to be positioned adjacent to but inbetween the first set. That looks like this:</p>
<pre><code class="language-css">  .panel:nth-child(2) {
    .left {
      left: 210px;
    }
    .right {
      right: 210px;
    }
  }
</code></pre>
<p>In the 2019 version, each image kept its width and created an overlapping effect. But here, I want the images to squish/stretch to simulate folding. So the <code>.left</code> and <code>.right</code> should fill the availabile space until they reach their full width. We can do this by using <code>calc()</code>.</p><p>The calculation takes 100% width of the container, subtracts the width of the first two panels (210px * 2 = 420px), and then divides the space by two (since we have a <code>.left</code> and a <code>.right</code> to account for).</p><p>I‚Äôm using <code>&lt;img&gt;</code> in this example, but in the site I‚Äôm using inline SVG. So each of those need <code>preserveAspectRatio=&quot;none&quot;</code> added to make sure they scale with their container.</p>
<pre><code class="language-css">  .panel:nth-child(2) {
    .left,
    .right {
      width: calc((100% - 420px) / 2);
      max-width: 210px;
    }
  }
</code></pre>
<p>Here‚Äôs a diagram that might help visualize what‚Äôs going on.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-poc-breakdown.jpg" width="1200" height="900" alt="a diagram outlining the widths and positions for placement of the illustrations within the container" loading="lazy"><p>This same treatment is applied to the third panel and its children.</p><p>(You might be thinking that the <code>.panel</code> containers aren‚Äôt really needed, and you‚Äôre right! But the organizational clarity for me felt worth this extra bit of markup.)</p><p>To make it feel more ‚Äúfoldy‚Äù, the panels are skewed using <code>transform: skewY()</code>. Setting <code>transform-origin</code> and a bit of <code>translate</code> helps ensure the edges connect at the right places.</p>
<pre><code class="language-css">  .panel:first-child {
    .left {
      transform: skewY(-2deg);
      transform-origin: right bottom;
    }
    .right {
      transform: skewY(2deg);
      transform-origin: left bottom;
    }
  }
  .panel:nth-child(2) {
    .left {
      transform: skewY(-5deg);
      transform-origin: left bottom;
    }
    .right {
      transform: skewY(5deg);
      transform-origin: right bottom;
    }
  }
  .panel:nth-child(3) {
    .left {
      transform: skewY(-5deg) translateY(18px);
      transform-origin: left bottom;
    }
    .right {
      transform: skewY(5deg) translateY(18px);
      transform-origin: right bottom;
    }
  }
</code></pre>
<p>It ultimately creates this effect:</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-poc-full.jpg" width="1200" height="327" alt="six The Good Place portraits chained together to look like a long folded piece" loading="lazy"><p>It seems like <code>perspective</code> or 3D transforms make sense here, but they were much more dynamic on resize than I wanted. <code>skew</code> provides the dimensional illusion without shifting as the width changes.</p><h2 id="creating-the-artwork">Creating the artwork</h2><p>So once I got the basics of the header figured out, I jumped into making text and artwork that could fold and unfold, creating a complete picture at each folding point. This was a challenge!</p><p>I tried big text, small text, splitting words in the middle (and then doing lots of searches like ‚Äúwords that end with -ign‚Äù), and was finally able to land on something that worked.</p><p>It was a process of trial and error, but what really helped was laying out the panels in Illustrator like this:</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-panels-setup.jpg" width="1200" height="520" alt="two panels with text across them; then the previous text panels split with two new blank panels in between; the blank space between has an arrow and ‚ÄúFill in words here so it makes sense still‚Äù" loading="lazy"><p>I would create the first panels (smallest fold) and then insert the next panels in between. And then do it again for the final fold:</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-panels-setup2.jpg" width="1200" height="520" alt="similar image to the one previous, but with two new blank panels in between" loading="lazy"><p>The illustrations worked similarly, splitting the panels and then making sure the edges meet to create a complete image. Here‚Äôs what the final artwork looks like:</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-header-home.jpg" width="1200" height="713" alt="sequence of panels showing the homepage header in various states" loading="lazy"><p>After a happy dance of finally figuring it out, I made folding artwork for the <a href="https://lynnandtonic.com/web">/web</a> and <a href="https://lynnandtonic.com/art">/art</a> pages too. (The art page header has a bit of a different treatment, which I‚Äôll describe in the next section.)</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-header-web.jpg" width="1200" height="713" alt="sequence of panels showing the web header in various states" loading="lazy"><h2 id="details">Adding details</h2><p>With any illusion, the details make or break it. With the folding header, the skew (as mentioned earlier) and some shading do the heavy lifting.</p><p>Each panel section gets an <code>:after</code> pseudo-element that controls how much ‚Äúshadow‚Äù it gets as the browser resizes. It is first sized and positioned directly on top of its parent.</p>
<pre><code class="language-css">  .left:after,
  .right:after {
    content: '';
    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    left: 0;
    top: 0;
  }
</code></pre>
<p>Then each panel gets some background treatment. The top gradient creates a ‚Äúfold‚Äù highlight at the edge and the following two provide some shadowing on either side of the panel. Here‚Äôs an example for one section:</p>
<pre><code class="language-css">  .left:after {
    background-color: rgba(0,0,0,.7);
    background-image: linear-gradient(to right, rgba(255,255,255,.2) 2px,
                                                rgba(255,255,255,0)  2px),
                      linear-gradient(to right, rgba(0,0,0,0)  2px,
                                                rgba(0,0,0,.9) 2px,
                                                rgba(0,0,0,0)  40%),
                      linear-gradient(to left,  rgba(0,0,0,.9),
                                                rgba(0,0,0,0) 40%);
  }
</code></pre>
<p>With similar styling applied to all the panels, we get something like this:</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-header-shadows.jpg" width="1200" height="438" alt="the folded header but with shading that makes it look more realistic" loading="lazy"><p>To mimic the changing light as it folds, I set a bunch of media queries in quick succession to adjust the opacity of the <code>:after</code> and transition between them.</p>
<pre><code class="language-css">  .left:after {
    transition: opacity 150ms ease-out;
  }
  @media screen and (min-width: 501px) {
    .left:after { opacity: 1; }
  }
  @media screen and (min-width: 550px) {
    .left:after { opacity: .9; }
  }
  @media screen and (min-width: 600px) {
    .left:after { opacity: .8; }
  }
  @media screen and (min-width: 650px) {
    .left:after { opacity: .7; }
  }
  @media screen and (min-width: 700px) {
    .left:after { opacity: .6; }
  }
  @media screen and (min-width: 750px) {
    .left:after { opacity: .5; }
  }
  @media screen and (min-width: 800px) {
    .left:after { opacity: .4; }
  }
  @media screen and (min-width: 850px) {
    .left:after { opacity: .3; }
  }
  @media screen and (min-width: 900px) {
    .left:after { opacity: .2; }
  }
</code></pre>
<p>Best seen <a href="https://lynnandtonic.com">on the landing page</a> where you can interact with it, but here‚Äôs a screenshot of what that looks like at different widths:</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-header-shadows-resize.jpg" width="1200" height="452" alt="the homepage header in various stages of folding, showing darker shadows when almost completely folded away" loading="lazy"><p>One last detail I‚Äôll mention is the header on the <a href="https://lynnandtonic.com/art">/art</a> page, which incorporates one additional panel section that ‚Äúpops‚Äù up at full width. A sharper <code>transform: skewY()</code> angle makes this work and is the closest I could get to recreating a pop-up page without making my brain melt.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-header-art-resize.jpg" width="1200" height="452" alt="the art header with popup panels" loading="lazy"><h2 id="pull-tabs">Pull-tabs</h2><p>Pull-tabs in pop-up books are a really neat technique of layering paper images that move and change soley from movement of the tab along a single axis. To accomplish this with code, I wanted to keep that constraint. The only thing that could trigger an effect was moving the pull-tab to the left/right or up/down.</p><figure><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-the-pop-up-channel-2.jpg" width="800" height="450" alt="Duncan Birminham holding a dissolve pull-tab card" loading="lazy"><figcaption class="footnote">Duncan Birmingham, showing a <a href="https://youtu.be/kC6_mBdrMaE">dissolve pull-tab card</a>.</figcaption></figure><p>Of course I hoped I could do this with CSS only, so I tried using <code>resize</code> as the pull mechanism. It worked in some ways, but with limitations on how much I could change the resize handle, it didn‚Äôt quite work.</p><p>So next I tried using an <code>&lt;input type=&quot;range&quot;&gt;</code> slider. I was delighted to see you could style things pretty well (as seen in <a href="https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/">this CSS-Tricks article</a>). This was <em>very</em> close to what I wanted to do. In the end though, it didn‚Äôt allow for the flexibility I needed. It also had a default behavior when clicking and dragging, where the browser shifts the handle to be exactly center under the cursor. You can see that happening <a href="https://codepen.io/lynnandtonic/pen/54c2bffb562b6ac524758928618a1922">here on CodePen</a>. Not a <em>huge</em> deal, but not the experince I wanted.</p><p>At this point I started looking for some drag and drop JavScript help. After trying a few libraries, I landed on David DeSandro‚Äôs <a href="https://draggabilly.desandro.com/">Draggabilly</a> which was a breeze to implement for me and offered single axis movement and containment. Perfecto.</p><p>There are three pull-tab techniques I‚Äôm using on the homepage: basic (David Rose and Lynn‚Äôs sunglasses), straight dissolve (A Single Div), and angled dissolve (Airport Codes).</p><h2>Basic pull-tab</h2><p>The basic pull-tab technique relies on ‚Äúwindowed‚Äù layers revealing a moving layer underneath. In the case of David Rose, I‚Äôm using a handful of images layered below and on top of the draggable layer (the sweater designs). Here‚Äôs a visual of the four layers, with David‚Äôs sweater transparent and the surrounding area solid. I changed some colors to hopefully make it more clear.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-david.jpg" width="1200" height="948" alt="diagram showing the different layers that go into the David Rose pull-tab" loading="lazy"><p>The solid color surrounding areas obscure the sweater design outside of the transparent window. They also leave an unobstructed area so the tab can be grabbed and dragged. Here‚Äôs the movement of the draggable layer with the top layers at lower opacity:</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-david.gif" width="600" height="403" alt="animation showing the David pull-tab moving the artwork behind transparent layers" loading="lazy"><p>The imagery is positioned absolutely one on top of the other. It‚Äôs a mix of inline SVG, <code>&lt;img&gt;</code>, and CSS <code>background-image</code> (which I‚Äôll get to later). The draggable layer needs a containing element:</p>
<pre><code class="language-html">  &lt;div class=&quot;david-wrapper&quot;&gt;
    &lt;div class=&quot;david-pull draggable&quot;&gt;
      &lt;img src=&quot;david-pull.svg&quot; alt=&quot;David‚Äôs sweaters&quot; /&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</code></pre>
<p>Then with Draggabilly, I can do this:</p>
<pre><code class="language-javascript">  var david = new Draggabilly( '.david-pull', {
    axis: 'x',
    containment: '.david-wrapper'
  });
</code></pre>
<p>The width of <code>.david-wrapper</code> limits how far the pull-tab can be pulled, serving as the stopping tab you‚Äôd build into a paper pull-tab.</p><h2>Straight dissolve pull-tab</h2><p>This technique creates a dissolve transition between one image and another. It works by cutting each image into equal strips and layering them in an alternating stack. It seemed like this could be recreated with <code>z-index</code>.</p><p>Here‚Äôs a pen that shows how this works. You can grab the turquoise layers on the right and drag down.</p>
<div class="wide"><p class="codepen" data-height="510" data-theme-id="dark" data-default-tab="result" data-user="lynnandtonic" data-slug-hash="6844b6efbce82ef7a42ce76e184c6f70" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Dragging z-index issue"><span>See the Pen <a href="https://codepen.io/lynnandtonic/pen/6844b6efbce82ef7a42ce76e184c6f70">Dissolve transition proof of concept</a> by Lynn Fisher (<a href="https://codepen.io/lynnandtonic">@lynnandtonic</a>) on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></div><p>The markup looks like this, with each <code>&lt;div&gt;</code> numbered for where it sits in the stack.</p>
<pre><code class="language-html">  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;
    &lt;div class=&quot;three&quot;&gt;3&lt;/div&gt;
    &lt;div class=&quot;five&quot;&gt;5&lt;/div&gt;
    &lt;div class=&quot;draggable&quot;&gt;
      &lt;div class=&quot;two&quot;&gt;2&lt;/div&gt;
      &lt;div class=&quot;four&quot;&gt;4&lt;/div&gt;
      &lt;div class=&quot;six&quot;&gt;6&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</code></pre>
<p>Then we position the layers and assign <code>z-index</code> values that correspond with each layer.</p>
<pre><code class="language-css">  .one {
    bottom: 0;
    z-index: 1;
  }
  .three {
    top: 33.33%;
    z-index: 3;
  }
  .five {
    top: 0;
    z-index: 5;
  }
  .two {
    bottom: 0;
    z-index: 2;
  }
  .four {
    top: 33.33%;
    z-index: 4;
  }
  .six {
    top: 0;
    z-index: 6;
  }

</code></pre>
<p>It‚Äôs using the same Draggabilly setup.</p>
<pre><code class="language-javascript">  var dissolve = new Draggabilly( '.draggable', {
    axis: 'y'
  });
</code></pre>
<p>Except I ran into an issue. Draggabilly by default is moving the draggable element with a CSS <code>transform</code> and this creates a new <code>z-index</code> stacking context. So I ended up losing the nice layered effect I had while the element was moving.</p><p>A quick fix was to move the element based on its <code>top</code> value instead of a <code>transform</code>. Not the best for performance normally, but it‚Äôs such a small interaction I figured it was just fine. (Thanks to <a href="https://twitter.com/SansThesis">Jason Rose</a> for helping me with this one.)</p>
<pre><code class="language-javascript">  dissolve.positionDrag = function() {
    this.setLeftTop();
  };
</code></pre>
<p>In the CodePen example, you can see top layer #6 sitting above the others. On the homepage, I‚Äôm using some artwork plus some strategically placed <code>:before</code> and <code>:after</code> pseudo-elements to cover up any pieces I don‚Äôt want you to see. Here‚Äòs how it looks in the end:</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-single-div-sm.gif" width="400" height="435" alt="animation showing a dissolve pull-tab effect changing a text editor into an illustration" loading="lazy"><h2>Angled dissolve pull-tab</h2><p>The angled dissolve works in exactly the same way as the straight dissolve, but the layers of the draggable image are masked with angled transparent PNGs.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-phx.jpg" width="1200" height="891" alt="PHX lettering and the same image masked with three different angled shapes" loading="lazy"><p>Why not use CSS <code>clip-path</code>? I wanted to! But <code>clip-path</code> made the image edges aliased, creating a thin line between layers and breaking the illusion. PNGs provided anti-aliasing to give me the smooth edges I wanted.</p><p>Here‚Äôs how the final effect looks:</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-phx-sm.gif" width="400" height="377" alt="animation showing an angled dissolve pull-tab effect changing PHX to Phoenix Sky Harbor" loading="lazy"><h2 id="changing-portraits">Changing portraits</h2><p>Whew. Still with me? üòÖ</p><p>In lieu of a folding header on the <a href="https://lynnandtonic.com/about">/about</a> page, I illustrated a series of self-portraits dressed as some of my favorite characters. Thanks to <a href="https://twitter.com/adamavenir">Adam Avenir</a> for the idea! As you resize the page smaller, you‚Äôll be able to catch them.</p><p>This is accomplished with a big sprite that shifts the <code>background-position</code> for each media query (similar technique I used for the <a href="https://lynnandtonic.com/thoughts/entries/case-study-2018-refresh/">2018 Bob‚Äôs Burgers animation</a>).</p><p>It starts with this base image.</p>
<pre><code class="language-css">  .avatar {
    width: 452px;
    height: 550px;
    position: relative;
    background-image: url('avatar-lynn-base.svg');
  }
</code></pre>
<img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/avatar-lynn-base.svg" width="400" height="487" alt="a picture frame and a partial portrait of Lynn‚Äôs face with body and mouth missing" loading="lazy"><p>And then layers a sprite on top with an <code>:after</code> pseudo-element.</p>
<pre><code class="language-css">  .avatar:after {
    content: '';
    width: 100%;
    height: 100%;
    position: absolute;
    background-repeat: no-repeat;
    background-image: url('avatar-lynn-costumes.svg');
    background-position: 0 0;
  }
</code></pre>
<p>A sample from the costume sprite:</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/avatar-lynn-costumes.jpg" width="900" height="761" alt="grid of costume illustrations without a face including Leia Organa, David Rose, and others" loading="lazy"><p>Then I can shift the <code>background-position</code> at each media query to show a different costume.</p>
<pre><code class="language-css">  @media screen and (min-width: 501px) {
    .avatar:after {
      background-position-x: -452px;
    }
  }
  @media screen and (min-width: 551px) {
    .avatar:after {
      background-position-x: -904px;
    }
  }
  @media screen and (min-width: 601px) {
    .avatar:after {
      background-position-x: 0;
      background-position-y: -550px;
    }
  }
  ... and so on
</code></pre>
<p>And it creates this fun effect when you resize the browser:</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-avatars.gif" width="400" height="474" alt="animation showing Lynn‚Äôs avatar changing costumes" loading="lazy"><h2>Aything else?</h2><p>There‚Äôs a couple other easter eggs to discover, but that covers most of it!</p><p>Last year I tried out a dark mode theme for <code>prefers-color-scheme</code> and this year I followed Andy Bell‚Äôs <a href="https://hankchizljaw.com/wrote/create-a-user-controlled-dark-or-light-mode/">user-controlled dark mode tutorial</a> which is just wonderful. It uses CSS custom properties in a way I haven‚Äôt before and that was cool to learn.</p><p>Remember how I mentioned that some of the pull-tabs use a mix of inline SVG, <code>&lt;img&gt;</code>, and <code>background-image</code>? Because of the solid color backgrounds that obscure layers beneath them, I needed to swap those colors for the light and dark theme. Adding a class to SVG paths and changing the <code>fill</code> color with custom properties made that no big lift at all.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/thoughts/case-study-2020-svg-background.jpg" width="400" height="440" alt="solid color background is white when it should be grey; label says ‚Äúgotta change this‚Äù" loading="lazy" style="max-width:300px"><p>Like with every refresh I learned more about cross-browser CSS behavior, SVG quirks, and different ways to lay things out with grid and flexbox. And I learned more than I ever imagined about pop-up books.</p><p>There‚Äôs a lot of reasons to do this refresh every year, but one downside is that I don‚Äôt code things for long-term maintenance. If it changes in a year, there‚Äôs not much pressure to try. But this year I did some intentional cleanup, consolidating, and creating of templates that I should have years ago. Felt really good!</p><p>I‚Äôll end this with my usual reminder that previous versions of the site are still viewable in <a href="https://lynnandtonic.com/archive">the archive</a>.</p><p>Until next year‚Äôs refresh. üëã Thanks for reading!</p>]]></description>
      <pubDate>Mon, 14 Dec 2020 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/case-study-2020-refresh/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/case-study-2020-refresh/</guid>
    </item>

    <item>
      <title>Cookies and a year of learning a new skill</title>
      <description><![CDATA[<p>In December of 2018 I tried my hand at decorating sugar cookies with royal icing. It was my first time using piping bags and different consistencies of icing. Dear reader, it was <em>fun</em>.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2018.jpg" alt="an assortment of decorated Christmas cookies"><small class="footnote">first batch of cookies from December 2018</small><p>Soon after I went down a rabbit hole of blogs and Instagram videos and holy cow people are making some amazing edible artwork. In my spirit of trying all the things, I made my 2019 resolution to get better at decorating cookies.</p><p>I spent a year baking and decorating, trying to make a batch or two each month. I experimented with different recipes and techniques, tried my hand at custom cookie cutters, and ended the year with two big orders for paying customers.</p><p>You can jump to <a href="#recipes">the recipes I landed on</a> or see <a href="#timeline">a timeline of all the cookies</a> I made this year, but I also wanted to share some of the things I learned (which are super relevant to design/development or learning any new skill, really).</p><h2>Utilize shared experience from the community</h2><p>The cookie decorating world is very open source. Recipes, tips and tricks, and how-to videos are <em>everywhere</em>. We joke a lot about the stories you have to scroll through to get to a recipe, but I read through a lot and found a ton of helpful information.</p><p>I watched a bunch of <a href="https://www.instagram.com/explore/tags/cookiedecorating/">Instagram videos</a> and took a class at <a href="https://smitholator.com/">Smith-o-lator Cookie Shop</a> in Mesa. Watching experienced folks do their thing helped me level up quickly. It‚Äôs very similar in the design and dev world. We like to say we‚Äôre self-taught, but a lot of us truly are community-taught.</p><h2>Map it out</h2><p>I‚Äôm usually a ‚Äúlet‚Äôs wing it and see what happens‚Äù kind of designer, but with cookies I really did better with a plan. Buying ingredients, chilling, baking, and mixing icing is a process that takes hours and was usually spread across a few days. There‚Äôs almost no ‚Äòundo‚Äô or ‚Äòreset‚Äô equivalent here. Makes you appreciate digital work for sure.</p><p>I‚Äôd make lists of what cookies to make, what icing colors I‚Äôd need, and, with some more complicated cookies, I drew things out to provide myself a guide. This was so effective, my husband (with no decorating experience) was able to make a pretty decent Baby Yoda cookie on his own.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-guide-yoda.jpg"><small class="footnote">Baby Yoda guide, my husband‚Äôs version, and my version</small><h2>Slow down</h2><p>Icing videos are super sped up and the rare realtime one still shows an experienced hand. It took me a while to find the right pace for me, which always ended up being ‚Äúslower than you think.‚Äù If things started to feel difficult, it always helped to slow down and take my time.</p><p>A few icing behaviors I‚Äôm still trying to figure out are craters forming as the icing dries and icing colors bleeding into one another.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-craters-bleed.jpg"><small class="footnote">small icing indentations and color bleeding</small><p>Research and experimentation tells me it‚Äôs a combination of the chemistry of the icing recipe, how viscous you mix the icing, humidity (or in my case, lack thereof), and especially not waiting long enough for things to dry before adding another color. Patience is key!</p><h2>Cookies are meant to be eaten</h2><p>Cookie decorating is a decent developer experience vs. user experience analogy. Lots of people were surprised when my cookies tasted good. They‚Äôd say, ‚ÄúPretty sugar cookies never taste good.‚Äù It makes sense to me now: almost every technique I found to make the cookies easier to work with or better looking made them taste worse.</p><p>Reducing the amount of butter made the cookies easier to cut, held shapes better, and reduced butter bleed (small amounts of grease seeping into the icing), but made them less delicious. Using meringue powder instead of egg whites made the icing <em>so smooth</em> to pipe but dried with a crispier, less pleasant texture. And surprisingly, lots of cookie decorators add corn syrup to their icing. If you see cookie icing that‚Äôs got a gorgeous sheen, it likely has corn syrup.</p><p>I decided to optimize for taste with the most natural ingredients I could. It made the decorating processs a bit more difficult, but is worth it!</p><h2>Make all the mistakes</h2><p>As with learning anything, I made so many mistakes. A cool thing about royal icing is it starts to dry immediately so you have a pretty small window of time to fix a mistake. After that, trying to fix it tends to make it <em>worse</em>. A nice built-in reminder to just accept mistakes and continue on.</p><p>This is a skill that requires a lot of hands-on practice and luckily every mistake or ugly cookie you make still tastes just as good.</p><h2>Tips and tricks</h2><p>Here‚Äôs the advice I can boil down to quick tips and tricks:</p><ul><li>Roll out the dough between two pieces of plastic wrap before chilling. It‚Äôs much easier to roll and then can be cut immediately from the fridge.</li></ul><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-dough.jpg" alt="sheets of rolled cookie dough pressed between plastic wrap"><ul><li>Put your piping bag in a glass for easy loading.</li></ul><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-piping-bag.jpg" alt="a plastic piping bag inside a glass"><ul><li>When using a piping bag with tip and coupler, use a tipless piping bag of icing <em>inside</em> it for easier loading and cleanup.</li><li>If your icing consistency isn‚Äôt quite right, stop and adjust it. Don‚Äôt power through.</li><li>Make more flood icing than you think you need.</li><li>Make less piping icing than you think you need.</li><li>If using a tipless bag, cut the hole smaller than you think you need.</li><li>Use gel food coloring.</li><li>Add some white gel coloring to icing before mixing colors in.</li><li>Use a cookie swivel for easy turning.</li><li>Buy pre-cut parchment paper (so convenient omg).</li></ul><h3 id="timeline">A year of progress</h2><p>Here‚Äôs all the cookies I made this year. I can see steady improvement and where I took a few steps backward. I had a lot of fun and I think my friends and family liked this hobby too. Excited for all the cookies and progress I‚Äôll make in 2020!</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-02.jpg"><small class="footnote">February 2019 - footballs, pretzels, ice cream</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-03.jpg"><small class="footnote">March 2019 - basketballs, cactus, hearts</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-04-1.jpg"><small class="footnote">April 2019 - skateboards, Xbox controllers</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-04-2.jpg"><small class="footnote">April 2019 - Pop Tarts, paint palettes, unicorns</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-05.jpg"><small class="footnote">May 2019 - graduation caps and gowns, balloons, stars</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-06-1.jpg"><small class="footnote">June 2019 - elven lembas bread</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-06-2.jpg"><small class="footnote">June 2019 - yarn and goldfish</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-06-3.jpg"><small class="footnote">June 2019 - cactus, stars, and lemons</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-07-1.jpg"><small class="footnote">July 2019 - cacti in pots</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-07-2.jpg"><small class="footnote">July 2019 - succulents</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-08.jpg"><small class="footnote">August 2019 - cacti in pots, ice cream</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-10.jpg"><small class="footnote">October 2019 - fall leaves, ghosts, pumpkins, cauldrons</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-1.jpg"><small class="footnote">December 2019 - Monomyth logomarks</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-2.jpg"><small class="footnote">December 2019 - Christmas gifts</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-3.jpg"><small class="footnote">December 2019 - Christmas cacti</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-4.jpg"><small class="footnote">December 2019 - computer mouse cursors</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-5.jpg"><small class="footnote">December 2019 - meltmedia logomarks</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-6.jpg"><small class="footnote">December 2019 - Baby Yodas</small><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/cookie-2019-12-7.jpg"><small class="footnote">December 2019 - snowflakes, assorted Christmas cookies</small><h3 id="recipes">Cookie and icing recipes</h2><p>And finally after a whole bunch of other stuff, here‚Äôs the recipes I use.</p><div class="callout"><h3>Sugar cookies</h3><ul class="unstyled"><li>3 cups all-purpose flour</li><li>1 cup sugar</li><li>1 cup butter</li><li>2 tbsp cream cheese</li><li>¬Ω tsp baking powder</li><li>¬Ω tsp salt</li><li>¬Ω tsp cream of tartar</li><li>1 large egg</li><li>1 teaspoon vanilla</li><li>¬Ω tsp almond extract</li></ul><p><strong>Prep dough</strong></p><p>Sift flour and combine with baking powder, salt, and cream of tartar in a large bowl. Set aside.</p><p>Crack egg into small bowl. Add vanilla and almond extracts and lightly beat. Set aside.</p><p>Cream butter and sugar in mixer on low-medium speed.</p><p>Add and mix in cream cheese.</p><p>Add egg mixture to bowl and beat on low-medium speed until combined.</p><p>Gradually add the flour to the bowl on low speed. Continue to mix until the dough starts to pull away form the sides of the bowl.</p><p>Divide dough into thirds. Using a roller, flatten each piece of dough to ¬º inch thick between two pieces of plastic wrap. Chill in the fridge for at least 2 hours.</p><p><strong>Bake</strong></p><p>Preheat oven to 350¬∞F.</p><p>Cut out cookies and place on parchment-lined cookie sheets.</p><p>Chill cut cookies for an additional 5 minutes.</p><p>Bake 8-12 minutes, depending on size and shape of cookie. Remove cookies when you see the slightest hint of golden brown on the bottom edges.</p></div><div class="callout"><h3>Royal icing</h3><ul class="unstyled"><li>4 cups powdered sugar</li><li>¬Ω tsp salt</li><li>¬º tsp cream of tartar</li><li>1 tsp vanilla extract</li><li>¬º cup pasteurized egg whites</li><li>water, as needed</li></ul><p>Sift the powdered sugar into a large bowl. Add the salt and cream of tartar.</p><p>Add the vanilla and egg whites. Mix on low speed and scrape sides of bowl.</p><p>Once combined, continue to mix with increasing speed for 4-5 minutes. The icing should turn more opaque and white, with firm peaks.</p><p>Add more water to make the icing looser. Add more powdered sugar to firm it up.</p></div>]]></description>
      <pubDate>Sun, 29 Dec 2019 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/cookies-and-a-year-of-learning-a-new-skill/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/cookies-and-a-year-of-learning-a-new-skill/</guid>
    </item>

    <item>
      <title>Case Study: lynnandtonic.com 2019 refresh</title>
      <description><![CDATA[<p>Last week I released my latest portfolio refresh. Like the previous two years, I wanted to create an experience that was enhanced by resizing the browser window. The 2017 version gave you <a href="https://lynnandtonic.com/thoughts/entries/case-study-2017-refresh/">a new layout every 100 pixels</a> and the 2018 version created <a href="https://lynnandtonic.com/thoughts/entries/case-study-2018-refresh/">a frame by frame animation</a>.</p><p>This year I initially set out to do something with the z-axis and explore depth and forward/backward motion. I liked the idea of using layered illustration to simulate traveling through space. Something like the <a href="https://youtu.be/x2rDrKUb6bM">opening of Beauty and the Beast</a>, but maybe you travel through different worlds or through tiny doors like Alice in Wonderland.</p><p>What really got me excited though was the concept of Russian nesting dolls. You open one and something similar, but wholly different exists inside.</p><p>I started with the idea of a self portrait that cracked open revealing new faces as you scaled the browser. Further scaling would zoom in, each outer head becoming blurred and eventually leaving the frame as you moved forward. I hoped it would feel dynamic, as if it existed in 3-dimensional space.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-mockup.jpg" alt="three nested faces separated to reveal a skull"><small class="footnote">exploratory sketch</small><p>I started implementing this into HTML and CSS to see if it would feel as I was imagining. I set it up with relative widths and heights so the artwork would fill the entire browser window. Even before I could add in some subtle transforms and transitions, the browsers screamed out in protest. Safari was like, ‚ÄúNope!‚Äù and literally stopped rendering anything.</p><p>Soooo... what now?</p><p>I tried things out with absolute pixel dimensions and things worked much better. Fewer calculations for the browser to make seemed like the way to go. So instead of zooming in, maybe at wider widths you could see <em>every</em> face in a strange, horizontal stack.</p><h2>Preparing the artwork</h2><p>As I was illustrating the different faces, I realized I was constrained by the mostly oval shape of the original portrait. Each subsequent face is hidden behind the one that precedes it, and to maintain the ‚Äúreveal‚Äù they do need to stay obscured until it‚Äôs their turn.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-heads-overlay.jpg" alt="a portrait of the artist, and the same portrait at lower opacity to reveal a skull underneath"><small class="footnote">the skull is hidden by the face in front</small><p>This constraint did help me move pretty quickly with illustrations. I was able to find inspiration in things I like and art styles I admire. Especially fun were the Lichtenstein and Picasso homages.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-faces.jpg" alt="portraits of the artist, one with comedy mustache and false nose glasses, one in Lichtenstein pop art style, and one in Picasso cubist style"><p>Keeping the heads mostly the same size and shape also made the layout calculations so much easier (even though it can look pretty gnarly in my source files). I‚Äôll dive into that more in a bit.</p><h2>Laying things out</h2><p>Each face is made up of a container <code>div</code> and two images (one for each side of the face). The markup looks like this:</p><pre><code>  &lt;div class=&quot;face&quot; id=&quot;blue&quot;&gt;
    &lt;img src=&quot;left-blue.svg&quot;  class=&quot;left&quot;  /&gt;
    &lt;img src=&quot;right-blue.svg&quot; class=&quot;right&quot; /&gt;
  &lt;/div&gt;
</code></pre>
<p>There are three major styles in play to create the opening effect. Each <code>div</code> has a specific <code>min-width</code> and each image is positioned a specific value from the left and right.</p><p>So the initial blue face gets styling like this:</p><pre><code>  .face#blue {
    width: 100vw;
    min-width: 620px;

    .left {
      position: absolute;
      left: 110px;
    }

    .right {
      position: absolute;
      right: 110px;
    }
  }
</code></pre>
<p>Here‚Äôs a diagram that might help visualize what that looks like.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-face-diagram.jpg" alt="a diagram outlining the widths and margins for placement of illustrations within the site"><p>The next face (the skull) would then have styling that looked something like this:</p><pre><code>  .face#skull {
    width: 100vw;
    min-width: 840px;

    .left {
      position: absolute;
      left: 220px;
    }

    .right {
      position: absolute;
      right: 220px;
    }
  }
</code></pre>
<img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-face-diagram2.jpg" alt="a similar diagram outlining widths and margins for another illustration"><p>Each subsequent face would get adjusted <code>min-width</code>, <code>left</code>, and <code>right</code> values so they are positioned correctly to create the reveal as the browser scales.</p><h2>Snap into place</h2><p>A little detail I love is the faces scale and move a wee bit when they open. This creates a ‚Äúsnap‚Äù effect that adds some dimension.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-face-snap.gif" alt="an animatio showing two sides of a face coming together and moving apart"><p>This is achieved for each face with two media queries in quick succession and CSS transforms.</p><pre><code>  @media screen and (min-width: 621px) {
    .face#blue .left {
      transform: scale(1.07) translate(-6px,0);
    }
    .face#blue .right {
      transform: scale(1.07) translate( 6px,0);
    }
  }

  @media screen and (min-width: 629px) {
    .face#blue .left {
      transform: scale(1.07) translate(-6px,7px);
    }
    .face#blue .right {
      transform: scale(1.07) translate( 6px,7px);
    }
  }
</code></pre>
<p>It might seem like a small thing, but it adds a lot.</p><h2>Shadows and masking</h2><p>One of the most challenging aspects of this concept was getting the shadows to behave the way I wanted.</p><p>With the faces overlapping each other, I wanted each one to cast a shadow on the face below it. CSS masking would make this possible. As you can see in the gif below, the shadow should only show on the skull‚Äôs surface, but it needed to be ‚Äústuck‚Äù to the blue face as things move. I have the full <code>linear-gradient</code> and the mask in orange showing on the left and the effect it creates on the right.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-mask.gif" alt="an animation showing the layers of illustration, mask, and shadow"><p>I originally planned to add the mask to each <code>&lt;div class="face"&gt;</code> and use an <code>:after</code> for the shadow, but there‚Äôs a fun browser bug I had to work around. In Chrome, <code>position: fixed</code> doesn‚Äôt work if that element‚Äôs parent has a transform applied (remember that snap?). And <code>position: fixed</code> was required to get the effect I wanted.</p><p>So the markup for each mask ended up like this, as a sibling of the corresponding face.</p><pre><code>  &lt;span class=&quot;mask&quot;&gt;
    &lt;div class=&quot;left&quot; &gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
  &lt;div class=&quot;face&quot; id=&quot;pizza&quot;&gt;
    ...
  &lt;/div&gt;
</code></pre>
<p>The left and right <code>div</code> have the mask applied. It‚Äôs an SVG that is placed at the same left/right values as the face (in this case, the skull). An <code>:after</code> pseudo-element draws the shadow.</p><pre><code>  .mask {
    bottom: 200px;
  }

  .mask .left {
    mask-image: url('left-skull-mask.svg');
    mask-position: left 220px top 0;
    mask-size: auto 400px;
  }
  .mask .right {
    mask-image: url('right-skull-mask.svg');
    mask-position: right 220px top 0;
    mask-size: auto 400px;
  }

  .mask .left:after {
    position: fixed;
    left: 220px;
    background-image: linear-gradient(to right, rgba(0,0,0,.3) 50%, transparent 57%);
  }
  .mask .right:after {
    position: fixed;
    right: 220px;
    background-image: linear-gradient(to left, rgba(0,0,0,.3) 50%, transparent 57%);
  }
</code></pre>
<p>Because of that Chrome bug, I have to do a little bit of manual changing to each mask to account for the snap transform:</p><pre><code>  @media screen and (min-width: 841px) {
    .mask {
      bottom: 186px;
    }
    .mask .left {
      mask-position: left 207px top 0;
      mask-size: auto 428px;
    }
    .mask .right {
      mask-position: right 207px top 0;
      mask-size: auto 428px;
    }
  }
  @media screen and (min-width: 849px) {
    .mask {
      bottom: 178px;
    }
  }
</code></pre>
<p>The shadows working in this way gives some depth and dimension to each layer as it moves in front and behind the others.</p><h2>Pre-processors are wonderful</h2><p>I have the CSS simplified here to show the basics of how things are working. But if you were to look at my <a href="https://github.com/lynnandtonic/lynnandtonic.com/blob/master/_styl/pages/home.styl">Stylus file for this page</a>, things are set up a bit differently. I won‚Äôt go too deep into it to save all of our brains, but here‚Äôs a quick overview.</p><p>Because the calculations were pretty consistent for the different faces, I was able to set variables and create mixins that calculated all the various poitioning values for me. So for the face widths, I set variables like this:</p><pre><code>  $face-1 = 620px
  $face-2 = $face-1 + 220
  $face-3 = $face-2 + 220
  $face-4 = $face-3 + 220
  $face-5 = $face-4 + 220
  ...
</code></pre>
<p>And then my mixin could look like this:</p><pre><code>  face(num,width,width2)
    min-width: width
    bottom: var(--face-y)
    z-index: (32 - (num * 2))

    img.right
      right: (100px * num + 10 * num)
    img.left
      left:  (100px * num + 10 * num)

    @media screen and (min-width: width + 1)
      img.right
        transform: scale(1.07) translate( 6px,0)
      img.left
        transform: scale(1.07) translate(-6px,0)

    @media screen and (min-width: width + 9)
      img.right
        transform: scale(1.07) translate( 6px,7px)
      img.left
        transform: scale(1.07) translate(-6px,7px)

    @media screen and (max-width: width2)
      opacity: 0
</code></pre>
<p>(I‚Äôm using a custom property of <code>var(--face-y)</code> here to position the faces from the bottom of the browser for various vertical media queries):</p><pre><code>  :root
    @media screen and (max-height: 550px)
      --face-y: 50px

    @media screen and (min-height: 551px)
      --face-y: 200px

    @media screen and (min-height: 820px)
      --face-y: 400px

    @media screen and (min-height: 1100px)
      --face-y: 570px
</code></pre>
<p>But back to that mixin.</p><p>I was then able to create each face with this short declaration style. Setting things up like this with <code>:nth-of-type</code> allowed me to change the order and remove/add faces in the markup without needing to adjust any CSS. (This is also why the faces and masks are different element types, divs and spans respectively.)</p><pre><code>  .face:nth-of-type(1)
    face(1,$face-1,0)
  .face:nth-of-type(2)
    face(2,$face-2,$face-1)
  .face:nth-of-type(3)
    face(3,$face-3,$face-2)
  .face:nth-of-type(4)
    face(4,$face-4,$face-3)
  .face:nth-of-type(5)
    face(5,$face-5,$face-4)
  ...
</code></pre>
<p>The masks also get a mixin (which is a bit more complicated). Math, amirite?</p><pre><code>  $shadow-h = 428px

  mask(num,name,width,width2)
    min-width: width
    z-index: (32 - (num * 2) + 1)
    bottom: var(--face-y)

    @media screen and (min-width: width + 1)
      bottom: calc(var(--face-y) - 14px)
    @media screen and (min-width: width + 9)
      bottom: calc(var(--face-y) - 22px)

    .left,
    .right
      min-width: width
      @media screen and (min-width: width + 1)
        height: $shadow-h
        mask-size: auto $shadow-h

    .left
      mask-image: url('https://lynnandtonic.com/assets/images/left-' + name + '-mask.svg')
      mask-position: left (100px * num + 10 * num) top 0
      @media screen and (min-width: width + 1)
        mask-position: left (100px * num + 10 * (num - 1) - 3) top 0
      &amp;:after
        left: (100px * num + 10 * num)

    .right
      mask-image: url('https://lynnandtonic.com/assets/images/right-' + name + '-mask.svg')
      mask-position: right (100px * num + 10 * num) top 0
      @media screen and (min-width: width + 1)
        mask-position: right (100px * num + 10 * (num - 1) - 3) top 0
      &amp;:after
        right: (100px * num + 10 * num)

    @media screen and (max-width: width2)
      opacity: 0
</code></pre>
<p>With this mixin, I can create each mask with a short declaration (inside a <code>@supports</code> for good measure).</p><pre><code>  @supports(mask-image: url(''))
    .mask:nth-of-type(2)
      mask(2,skull,$face-2,$face-1)
    .mask:nth-of-type(3)
      mask(3,pizza,$face-3,$face-2)
    .mask:nth-of-type(4)
      mask(4,pops,$face-4,$face-3)
    .mask:nth-of-type(5)
      mask(5,mustache,$face-5,$face-4)
    ...
</code></pre>
<p>There‚Äôs some more fun Stylus stuff going on that made the process fun and manageable for me. If you want to dig into that, <a href="https://github.com/lynnandtonic/lynnandtonic.com/blob/master/_styl/pages/home.styl">take a peek on GitHub</a>.</p><h2>Other details</h2><p>There‚Äôs a lot for me to love and for you to discover in this refresh, but I will say one of my favorite parts is the helmet and cyborg faces combo. I knew I wanted to play with transparency somewhere and I love how resizing the helmet reveals even more.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-helmet.jpg" alt="illustration of a golden cyborg Lynn and a helmet opening up"><p>And of course, I love tiny stretchy Lynn at the center of it all. The arm stretching was a last minute addition and a brilliant suggestion from <a href="https://twitter.com/richardiii">my friend Richard</a>. The left/right mechanical arms and pulleys couldn‚Äôt use my nice mixins, so I had to write <a href="https://github.com/lynnandtonic/lynnandtonic.com/blob/master/_styl/pages/home.styl#L128-L175">something extra for those</a>. I realize not everyone has a giant monitor to see this, but I really loved it and wanted to include it.</p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-stretchy.jpg" alt="a tiny Lynn with stretchy arms holds onto ropes and pulleys"><p>Also, vertical media queries + pups. ‚ù§</p><h2>Lots of good stuff learned</h2><p>I always learn something new with these refreshes and this one was no different.</p><p>I got to try out masking and discover all the weird browser issues with it (Edge, why you leave artifacts?). I got pretty good at positioning and made my brain hurt figuring out repeatable calculation patterns.</p><p>I found the limit of what the browser could render while resizing. And I gained a better understanding of when I should use CSS custom properties vs pre-processor variables.</p><p>Plus I got to try out styling the site for dark mode.</p><img class="wide" src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/lynnandtonic-2019-darkmode.jpg" alt="a screenshot of the /web page of lynnandtonic.com with a dark grey background"><p>I‚Äôll end this with a friendly reminder that previous versions of the site are still viewable in <a href="https://lynnandtonic.com/archive">the archive</a>.</p><p>Until next year‚Äôs refresh. üëã Thanks for following along!</p>]]></description>
      <pubDate>Tue, 26 Nov 2019 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/case-study-2019-refresh/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/case-study-2019-refresh/</guid>
    </item>

    <item>
      <title>The value of an outside perspective</title>
      <description><![CDATA[<img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/blog-illo-outside-perspective.png" alt="Outside a window, a yeti smiles and waves hello."><small>When is someone on the outside very helpful (and not creepy)?</small><p>I don‚Äôt think I need to convince anyone that having another person review your work is a good thing. It‚Äôs probably already built into your teams and processes. Programmers pair up and build a feature together, bouncing ideas off one another. Code reviews are required before new work can be merged into our apps. Design teams hold critiques where the work is examined and people provide feedback.</p><p>In most of these cases, the people reviewing the work are our teammates or clients. Let‚Äôs say they‚Äôre ‚ÄúPeople who get you.‚Äù</p><h2>People who get you</h2><p>These people work with you. Sometimes it feels like your coworkers and clients understand you better than you do. This makes discussing your work super productive. They know what you‚Äôre trying to do, they get your communication style, and they see a similar vision for the work. When the feedback is good, it‚Äôs <em>really</em> good. You‚Äôre collaborating and the work is flowing.</p><p>But are there gaps that can cause the work to suffer? The People who get you are usually like-minded and can be oblivious or ignorant to the same things you are. Have you ever seen a product or marketing campaign that‚Äôs just blatantly offensive? You ask yourself, ‚Äú<em>How</em> could they not see it? No one said anything?‚Äù Maybe all the people in the room were missing this crucial information. Or the person who saw it couldn‚Äôt speak up or was ignored.</p><p>Keeping feedback inside a project, team, or org can be weighed down by cultural baggage. Teams love to say they‚Äôre low on politics, but honestly it‚Äôs unavoidable. A higher-up can drop a bomb of feedback and derail a team. Teammates can resist solutions because it‚Äôs not how it‚Äôs always been done. Sometimes feedback and ideas are <em>actually heard</em> from only specific people or roles, despite how many people are saying them.</p><p>So what then? Ask for feedback from people who don‚Äôt know you? That can be risky. They don‚Äôt know your history, all the difficult decisions you‚Äôve had to make to get to today. They don‚Äôt have an investment in your success. You‚Äôll have to catch them up and answer questions you‚Äôve answered before, turn down ideas you‚Äôve already tried and rejected. It‚Äôll take too much time.</p><p>But there‚Äôs an opportunity there, with these People who don‚Äôt get you ‚Ä¶yet.</p><h2>People who don‚Äôt get you ‚Ä¶yet</h2><p>The cool thing about getting an outside perspective is it‚Äôs a viewpoint that‚Äôs impossible for you to have yourself. Seeing things for the first time is insight a person has once.</p><p>We‚Äôve seen the immense value of putting our work and processes in front of a beginner or a brand new teammate and them asking questions and speaking their mind. It can immediately reveal gaps in documentation, process, or our assumptions. It brings a unique clarity that only a Person who doesn‚Äôt get you yet can.</p><p>And the time spent ‚Äúcatching them up‚Äù is the perfect chance to evaluate how you explain your work. There <em>is</em> only so much time, so what information do you convey and what do you cut? They‚Äôll likely ask questions you‚Äôve already answered, but I‚Äôm certain they‚Äôll ask questions you haven‚Äôt considered. Often decisions get made without us realizing it and this forces you to examine them and explain why things are as they are.</p><p>People who don‚Äôt get you yet can see and evaluate your work without the baggage I mentioned earlier. They can see the work at face value, as it is. They won‚Äôt be worried about shareholders or the many years you‚Äôve spent iterating. Does the work reflect the purpose and direction you‚Äôre selling?</p><p>And as far as investing in your success, if you find the right People who don‚Äôt get you yet, they will approach this important job of giving feedback with support and encouragement in mind. It can absolutely be counterproductive to seek this valuable insight from people who don‚Äôt have your back. In our experience, peers and/or consultants who can bring humility, kindness, and expertise to this process are value multipliers.</p><p>--</p><p><em>This was originally published on <a href="https://blog.andyet.com/2019/06/19/the-value-of-an-outside-perspective/">blog.andyet.com</a>.</em></p>]]></description>
      <pubDate>Wed, 20 Jun 2019 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/the-value-of-an-outside-perspective/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/the-value-of-an-outside-perspective/</guid>
    </item>

    <item>
      <title>Five years of A Single Div</title>
      <description><![CDATA[<p>On 22 May 2014, I publish a little camera illustration. It‚Äôs drawn with CSS and one HTML element (a div).</p><p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/single-div-camera.png" alt="A CSS drawing of a vintage camera."></p><p>With this, my favorite little side project is born.</p><p>I draw some food, a Captain America shield, and an iPhone battery. CSS solidifies itself as my favorite artistic medium.</p><p>With each drawing, I share a tweet. People seem to really dig it. It encourages me to keep going.</p><p>I give the project a name and buy <a href="https://a.singlediv.com">a domain</a>.</p><p>Mozilla Hacks invites me to <a href="https://hacks.mozilla.org/2014/09/single-div-drawings-with-css/">write a tutorial</a>.</p><p>My web heroes see the project, share it, and praise it. I can‚Äôt believe it. I‚Äôm positively glowing üòª.</p><p>A Single Div hits Reddit and Hacker News. It‚Äôs exciting and horrible at the same time. It inspires my favorite tagline: I specialize in projects that make people say ‚ÄúI don‚Äôt get it.‚Äù</p><p>The drawings become more complex as I try out new techniques and find new challenges.</p><p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/web-a-single-div.jpg" alt="A selection of drawings from A Single Div."></p><p>A Single Div is featured in Net Magazine. I‚Äôm beside myself with joy.</p><p>People holler at me about SVG. This seems to hold even for my projects that follow. Something <a href="https://a.singlediv.com/#svg">I can joke about</a> fondly now. Yes, I‚Äôve heard of SVG.</p><p>I give a talk on <a href="https://lynnandtonic.com/thoughts/entries/talk-illustration-with-css/">CSS illustration at CSSDay</a>. I share A Single Div and talk about art with a bunch of developers. I‚Äôm holding on to this high.</p><p>A Single Div becomes a project I can work on even when I‚Äôm feeling stuck. A few hours here or there and the site continues to grow.</p><p>I learn <em>so much</em> about CSS behavior. I grow a deep, mental reference I can pull from for my job and paid projects. ‚ÄúReal‚Äù projects as people often say. But truly, what project isn‚Äôt real?</p><p>I test the limits of my creativity. The constraints help me to see things differently. And to see <em>myself</em> differently. ‚ÄúCan I draw this?‚Äù feels like ‚ÄúGosh, I don‚Äôt think I can.‚Äù But with enough thinking, it shifts to ‚ÄúHoly crap, it works.‚Äù Honestly I still look back at some of these drawings and wonder how the heck I did that.</p><p>I‚Äôve learned so much from you, little side project. Happy fifth anniversary (I heard the traditional gift is wood üëá).</p><p><img src="https://lynnandtonic.comhttps://lynnandtonic.com/assets/images/single-div-five.png" alt="A CSS drawing of the word FIVE made of wood logs."></p><small class="footnote">View this latest drawing and more at <a href="https://a.singlediv.com">a.singlediv.com</a>.</small><p>üçª Cheers to five more years.</p>]]></description>
      <pubDate>Wed, 22 May 2019 16:00:00 +0000</pubDate>
      <link>https://lynnandtonic.com/thoughts/entries/five-years-of-a-single-div/</link>
      <guid isPermaLink="true">https://lynnandtonic.com/thoughts/entries/five-years-of-a-single-div/</guid>
    </item>

  </channel>
</rss>
